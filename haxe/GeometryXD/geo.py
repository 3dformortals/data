# Generated by Haxe 3.4.4
# coding: utf-8

import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import random as python_lib_Random


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class GeometryXD:
    _hx_class_name = "GeometryXD"
    __slots__ = ()
    _hx_statics = ["main", "sum_I", "sum_F", "diff_I", "diff_F", "middle_F", "multiply_FperF", "multiply_I", "multiply_F", "minus_I", "minus_F", "sum_xI", "sum_xF", "diff_xI", "diff_xF", "middle_xF", "multiply_xFperF", "multiply_xI", "multiply_xF", "multisum_xI", "multisum_xF", "sum_previous_I", "diff_previous_I", "sum_before_I", "diff_before_I", "sum_previous_F", "diff_previous_F", "sum_before_F", "diff_before_F", "recounter_I_F", "recounter_F_I", "recounter_I_S", "recounter_F_S", "recounter_S_I", "recounter_S_F", "repeater_F_F", "repeater_I_I", "repeater_S_S", "repeater_F_I", "repeater_S_I", "repeater_I_F", "repeater_S_F", "repeater_I_S", "repeater_F_S", "an_in_b_S", "an_in_bn_S", "an_in_b_I", "an_in_bn_I", "an_in_b_F", "an_in_bn_F", "chain_indexes", "chain_S", "chain_I", "chain_F", "steps_internal", "steps_external", "sin_cos_cut", "degrees", "radians", "angle_quadrant", "vecXDmod", "maxabs", "vecXD", "vecXDone", "vecXDfield", "vecXDsame", "vecXDfieldsame", "vecXDrandom", "vecXDsum", "vecXDfieldsum", "vecXDdiff", "vecXDfielddiff", "vecXDback", "vecXDfieldback", "vecXDparalleled_sameside", "vecXDparalleled_opposite", "vecXDparalleled", "vecXDscalar", "vecXDcos", "vecXDangle", "vec3Dnormal", "vec3Dfieldnormal", "vecXDmiddle", "vecXDsamesize", "vecXDfieldsamesize", "vecXDfieldmiddle", "dotXDoffset", "dot3Dline3D_x_plane3D", "projection_dot3D_on_plane3D", "dot3D_to_dot2Dviewplane", "dotXDscale", "vec3Drotate", "dot3Drotate", "plane3D_dot3Dnormal", "plane3D_dot_vec_vec", "plane3D_3dots", "plane3D_2dots", "distance_dot3D_plane3D", "random_vec3D_in_plane3D", "random_dot3D_in_plane3D", "curve3Dbeziercubic", "curve3Dbeziercubic_3dots", "line3Dbeziercubic_2dots", "line3Dbeziercubic", "beziercubic3D_4to12", "beziercubic3D_12to4", "beziercubic3D_derivativeparameters", "beziercubic_derivative", "beziercubic3D_derivative", "beziercubic_support_dot_one", "beziercubic3D_support_dot_one", "beziercubic_support_dot_two", "beziercubic3D_support_dot_two", "beziercubic3D_follow_4dots_trajectory", "projection_vec3D_on_plane3D", "angle_vec3Dvec3D_projection_on_plane3D"]

    @staticmethod
    def main():
        print("GeometryXD")

    @staticmethod
    def sum_I(a):
        rez = 0
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez = (rez + i)
        return rez

    @staticmethod
    def sum_F(a):
        rez = 0
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez = (rez + i)
        return rez

    @staticmethod
    def diff_I(a):
        rez = (a[0] if 0 < len(a) else None)
        _g1 = 1
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez = (rez - i)
        return rez

    @staticmethod
    def diff_F(a):
        rez = (a[0] if 0 < len(a) else None)
        _g1 = 1
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez = (rez - i)
        return rez

    @staticmethod
    def middle_F(a):
        return (GeometryXD.sum_F(a) / len(a))

    @staticmethod
    def multiply_FperF(a,n):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(((a[i] if i >= 0 and i < len(a) else None) * n))
        return _g

    @staticmethod
    def multiply_I(a):
        rez = (a[0] if 0 < len(a) else None)
        _g1 = 1
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez = (rez * i)
        return rez

    @staticmethod
    def multiply_F(a):
        rez = (a[0] if 0 < len(a) else None)
        _g1 = 1
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez = (rez * i)
        return rez

    @staticmethod
    def minus_I(a):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(-(a[i] if i >= 0 and i < len(a) else None))
        return _g

    @staticmethod
    def minus_F(a):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(-(a[i] if i >= 0 and i < len(a) else None))
        return _g

    @staticmethod
    def sum_xI(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.sum_I(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def sum_xF(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.sum_F(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def diff_xI(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.diff_I(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def diff_xF(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.diff_F(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def middle_xF(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.middle_F(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def multiply_xFperF(a,n):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = GeometryXD.multiply_FperF((a[i] if i >= 0 and i < len(a) else None),n)
            _g.append(x)
        return _g

    @staticmethod
    def multiply_xI(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.multiply_I(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def multiply_xF(a):
        _g = []
        _g2 = 0
        _g1 = len((a[0] if 0 < len(a) else None))
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = len(a)
            while (_g5 < _g4):
                ai = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i))
            x = GeometryXD.multiply_F(_g3)
            _g.append(x)
        return _g

    @staticmethod
    def multisum_xI(a):
        return GeometryXD.sum_I(GeometryXD.multiply_xI(a))

    @staticmethod
    def multisum_xF(a):
        return GeometryXD.sum_F(GeometryXD.multiply_xF(a))

    @staticmethod
    def sum_previous_I(a):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) + python_internal_ArrayImpl._get(a, (i - 1)))))
        return _g

    @staticmethod
    def diff_previous_I(a):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(a, (i - 1)))))
        return _g

    @staticmethod
    def sum_before_I(a):
        rez = []
        x = 0
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            x = (x + (a[i] if i >= 0 and i < len(a) else None))
            rez.append(x)
        return rez

    @staticmethod
    def diff_before_I(a):
        rez = [(a[0] if 0 < len(a) else None)]
        _g1 = 1
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez.append(((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(a, (i - 1))))
        return rez

    @staticmethod
    def sum_previous_F(a):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) + python_internal_ArrayImpl._get(a, (i - 1)))))
        return _g

    @staticmethod
    def diff_previous_F(a):
        _g = []
        _g2 = 0
        _g1 = len(a)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(a, (i - 1)))))
        return _g

    @staticmethod
    def sum_before_F(a):
        rez = []
        x = 0
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            x = (x + (a[i] if i >= 0 and i < len(a) else None))
            rez.append(x)
        return rez

    @staticmethod
    def diff_before_F(a):
        rez = [(a[0] if 0 < len(a) else None)]
        _g1 = 1
        _g = len(a)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez.append(((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(a, (i - 1))))
        return rez

    @staticmethod
    def recounter_I_F(what):
        rez = []
        _g = []
        _g2 = 0
        _g1 = len(what)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            rez.append((what[i] if i >= 0 and i < len(what) else None))
            x = len(rez)
            _g.append(x)
        return _g

    @staticmethod
    def recounter_F_I(what):
        rez = []
        _g = []
        _g2 = 0
        _g1 = len(what)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = None
            try:
                x = int((what[i] if i >= 0 and i < len(what) else None))
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                x = None
            rez.append(x)
            x1 = len(rez)
            _g.append(x1)
        return _g

    @staticmethod
    def recounter_I_S(what):
        rez = []
        _g = []
        _g2 = 0
        _g1 = len(what)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = Std.string((what[i] if i >= 0 and i < len(what) else None))
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def recounter_F_S(what):
        rez = []
        _g = []
        _g2 = 0
        _g1 = len(what)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = Std.string((what[i] if i >= 0 and i < len(what) else None))
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def recounter_S_I(what):
        rez = []
        _g = []
        _g2 = 0
        _g1 = len(what)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = Std.parseInt((what[i] if i >= 0 and i < len(what) else None))
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def recounter_S_F(what):
        rez = []
        _g = []
        _g2 = 0
        _g1 = len(what)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = Std.parseFloat((what[i] if i >= 0 and i < len(what) else None))
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def repeater_F_F(n,what,full = False):
        if (full is None):
            full = False
        rez = None
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_I_I(n,what,full = False):
        if (full is None):
            full = False
        rez = None
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_S_S(n,what,full = False):
        if (full is None):
            full = False
        rez = None
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_F_I(n,what_,full = False):
        if (full is None):
            full = False
        rez = None
        what = GeometryXD.recounter_F_I(what_)
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_S_I(n,what_,full = False):
        if (full is None):
            full = False
        rez = None
        what = GeometryXD.recounter_S_I(what_)
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_I_F(n,what_,full = False):
        if (full is None):
            full = False
        rez = None
        what = GeometryXD.recounter_I_F(what_)
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_S_F(n,what_,full = False):
        if (full is None):
            full = False
        rez = None
        what = GeometryXD.recounter_S_F(what_)
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_I_S(n,what_,full = False):
        if (full is None):
            full = False
        rez = None
        what = GeometryXD.recounter_I_S(what_)
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def repeater_F_S(n,what_,full = False):
        if (full is None):
            full = False
        rez = None
        what = GeometryXD.recounter_F_S(what_)
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g2 = 0
        _g1 = ind
        while (_g2 < _g1):
            _ = _g2
            _g2 = (_g2 + 1)
            _g4 = 0
            _g3 = wl
            while (_g4 < _g3):
                i = _g4
                _g4 = (_g4 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            rez = rez[0:n]
        return rez

    @staticmethod
    def an_in_b_S(a,b):
        rez = None
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            ia = _g1
            _g1 = (_g1 + 1)
            _g3 = 0
            _g2 = len(b)
            while (_g3 < _g2):
                ib = _g3
                _g3 = (_g3 + 1)
                if ((a[ia] if ia >= 0 and ia < len(a) else None) == (b[ib] if ib >= 0 and ib < len(b) else None)):
                    rez.append([ia, ib])
        return rez

    @staticmethod
    def an_in_bn_S(a,b):
        rez = None
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            ia = _g1
            _g1 = (_g1 + 1)
            _g3 = 0
            _g2 = len(b)
            while (_g3 < _g2):
                ib = _g3
                _g3 = (_g3 + 1)
                _g5 = 0
                _g4 = len((b[ib] if ib >= 0 and ib < len(b) else None))
                while (_g5 < _g4):
                    ibn = _g5
                    _g5 = (_g5 + 1)
                    if ((a[ia] if ia >= 0 and ia < len(a) else None) == python_internal_ArrayImpl._get((b[ib] if ib >= 0 and ib < len(b) else None), ibn)):
                        rez.append([ia, ib, ibn])
        return rez

    @staticmethod
    def an_in_b_I(a,b):
        rez = None
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            ia = _g1
            _g1 = (_g1 + 1)
            _g3 = 0
            _g2 = len(b)
            while (_g3 < _g2):
                ib = _g3
                _g3 = (_g3 + 1)
                if ((a[ia] if ia >= 0 and ia < len(a) else None) == (b[ib] if ib >= 0 and ib < len(b) else None)):
                    rez.append([ia, ib])
        return rez

    @staticmethod
    def an_in_bn_I(a,b):
        rez = None
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            ia = _g1
            _g1 = (_g1 + 1)
            _g3 = 0
            _g2 = len(b)
            while (_g3 < _g2):
                ib = _g3
                _g3 = (_g3 + 1)
                _g5 = 0
                _g4 = len((b[ib] if ib >= 0 and ib < len(b) else None))
                while (_g5 < _g4):
                    ibn = _g5
                    _g5 = (_g5 + 1)
                    if ((a[ia] if ia >= 0 and ia < len(a) else None) == python_internal_ArrayImpl._get((b[ib] if ib >= 0 and ib < len(b) else None), ibn)):
                        rez.append([ia, ib, ibn])
        return rez

    @staticmethod
    def an_in_b_F(a,b):
        rez = None
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            ia = _g1
            _g1 = (_g1 + 1)
            _g3 = 0
            _g2 = len(b)
            while (_g3 < _g2):
                ib = _g3
                _g3 = (_g3 + 1)
                if ((a[ia] if ia >= 0 and ia < len(a) else None) == (b[ib] if ib >= 0 and ib < len(b) else None)):
                    rez.append([ia, ib])
        return rez

    @staticmethod
    def an_in_bn_F(a,b):
        rez = None
        _g1 = 0
        _g = len(a)
        while (_g1 < _g):
            ia = _g1
            _g1 = (_g1 + 1)
            _g3 = 0
            _g2 = len(b)
            while (_g3 < _g2):
                ib = _g3
                _g3 = (_g3 + 1)
                _g5 = 0
                _g4 = len((b[ib] if ib >= 0 and ib < len(b) else None))
                while (_g5 < _g4):
                    ibn = _g5
                    _g5 = (_g5 + 1)
                    if ((a[ia] if ia >= 0 and ia < len(a) else None) == python_internal_ArrayImpl._get((b[ib] if ib >= 0 and ib < len(b) else None), ibn)):
                        rez.append([ia, ib, ibn])
        return rez

    @staticmethod
    def chain_indexes(a_l,n,ring):
        rez = None
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = []
        if ring:
            _g = []
            _g1 = 0
            while (_g1 < 2):
                b = _g1
                _g1 = (_g1 + 1)
                _g3 = 0
                _g2 = a_l
                while (_g3 < _g2):
                    i = _g3
                    _g3 = (_g3 + 1)
                    x = None
                    if (b < 1):
                        x = i
                    elif (i < ((n - 1))):
                        x = i
                    else:
                        continue
                    _g.append(x)
            ind = _g
        else:
            _g4 = []
            _g21 = 0
            _g11 = ((1 + a_l) - n)
            while (_g21 < _g11):
                i1 = _g21
                _g21 = (_g21 + 1)
                _g4.append(i1)
            ind = _g4
        return rez

    @staticmethod
    def chain_S(a,n,ring = False):
        if (ring is None):
            ring = False
        rez = None
        a_l = len(a)
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = GeometryXD.chain_indexes(a_l,n,ring)
        _g = []
        _g2 = 0
        _g1 = len(ind)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = n
            while (_g5 < _g4):
                j = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get(a, python_internal_ArrayImpl._get((ind[i] if i >= 0 and i < len(ind) else None), j)))
            _g.append(_g3)
        rez = _g
        return rez

    @staticmethod
    def chain_I(a,n,ring = False):
        if (ring is None):
            ring = False
        rez = None
        a_l = len(a)
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = GeometryXD.chain_indexes(a_l,n,ring)
        _g = []
        _g2 = 0
        _g1 = len(ind)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = n
            while (_g5 < _g4):
                j = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get(a, python_internal_ArrayImpl._get((ind[i] if i >= 0 and i < len(ind) else None), j)))
            _g.append(_g3)
        rez = _g
        return rez

    @staticmethod
    def chain_F(a,n,ring = False):
        if (ring is None):
            ring = False
        rez = None
        a_l = len(a)
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = GeometryXD.chain_indexes(a_l,n,ring)
        _g = []
        _g2 = 0
        _g1 = len(ind)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g3 = []
            _g5 = 0
            _g4 = n
            while (_g5 < _g4):
                j = _g5
                _g5 = (_g5 + 1)
                _g3.append(python_internal_ArrayImpl._get(a, python_internal_ArrayImpl._get((ind[i] if i >= 0 and i < len(ind) else None), j)))
            _g.append(_g3)
        rez = _g
        return rez

    @staticmethod
    def steps_internal(xmin,xmax,n,borders = False):
        if (borders is None):
            borders = False
        rez = None
        if (n < 1):
            return rez
        st = (((xmax - xmin)) / ((n + 1)))
        if borders:
            _g = []
            _g2 = 0
            _g1 = (n + 2)
            while (_g2 < _g1):
                i = _g2
                _g2 = (_g2 + 1)
                _g.append(((xmin + ((st * i))) if (((i > 0) and ((i < ((n + 1)))))) else (xmin if ((i == 0)) else xmax)))
            rez = _g
        else:
            _g3 = []
            _g21 = 1
            _g11 = (n + 1)
            while (_g21 < _g11):
                i1 = _g21
                _g21 = (_g21 + 1)
                _g3.append((xmin + ((st * i1))))
            rez = _g3
        return rez

    @staticmethod
    def steps_external(smin,smax,n,direction):
        rez = None
        if (((n < 1) or ((direction < -1))) or ((direction > 1))):
            return rez
        st = (smax - smin)
        if (direction > 0):
            _g = []
            _g2 = 0
            _g1 = (n + 2)
            while (_g2 < _g1):
                i = _g2
                _g2 = (_g2 + 1)
                _g.append((smin + ((st * i))))
            rez = _g
        elif (direction < 0):
            full = (smin - ((st * n)))
            _g3 = []
            _g21 = 0
            _g11 = (n + 2)
            while (_g21 < _g11):
                i1 = _g21
                _g21 = (_g21 + 1)
                _g3.append((full + ((st * i1))))
            rez = _g3
        else:
            full1 = (smin - ((st * n)))
            _g4 = []
            _g12 = 0
            while (_g12 < 2):
                b = _g12
                _g12 = (_g12 + 1)
                _g31 = 0
                _g22 = (n + 2)
                while (_g31 < _g22):
                    i2 = _g31
                    _g31 = (_g31 + 1)
                    x = None
                    if (b == 0):
                        x = (full1 + ((st * i2)))
                    elif (i2 > 1):
                        x = (smin + ((st * i2)))
                    else:
                        continue
                    _g4.append(x)
            rez = _g4
        return rez

    @staticmethod
    def sin_cos_cut(x):
        if (x > 1):
            return 1
        elif (x < -1):
            return -1
        else:
            return x

    @staticmethod
    def degrees(angle):
        return ((angle * 180) / Math.PI)

    @staticmethod
    def radians(angle):
        return ((angle / 180) * Math.PI)

    @staticmethod
    def angle_quadrant(angle,rad = False):
        if (rad is None):
            rad = False
        k = 4
        if rad:
            angle = GeometryXD.degrees(angle)
        x = HxOverrides.modf(angle, 360)
        if (x > 0):
            k = 1
        elif (x > 90):
            k = 2
        elif (x > 180):
            k = 3
        elif (x > 270):
            k = 4
        elif (x < 0):
            k = 4
        elif (x <= -90):
            k = 3
        elif (x <= -180):
            k = 2
        elif (x <= -270):
            k = 1
        else:
            k = 4
        return k

    @staticmethod
    def vecXDmod(vecXD):
        sum = 0
        _g = 0
        while (_g < len(vecXD)):
            i = (vecXD[_g] if _g >= 0 and _g < len(vecXD) else None)
            _g = (_g + 1)
            sum = (sum + ((i * i)))
        if (sum < 0):
            return Math.NaN
        else:
            return python_lib_Math.sqrt(sum)

    @staticmethod
    def maxabs(vecXD):
        rez = 0
        _g = 0
        while (_g < len(vecXD)):
            i = (vecXD[_g] if _g >= 0 and _g < len(vecXD) else None)
            _g = (_g + 1)
            if (Reflect.field(Math,"fabs")(i) > Reflect.field(Math,"fabs")(rez)):
                rez = i
        return rez

    @staticmethod
    def vecXD(dot3Da,dot3Db):
        rez = None
        if ((not GeometryXD.vecXDsamesize(dot3Da,dot3Db)) or GeometryXD.vecXDsame(dot3Da,dot3Db)):
            return rez
        rez = []
        _g1 = 0
        _g = len(dot3Da)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            rez.append(((dot3Db[i] if i >= 0 and i < len(dot3Db) else None) - (dot3Da[i] if i >= 0 and i < len(dot3Da) else None)))
        return rez

    @staticmethod
    def vecXDone(vecXD):
        rez = []
        lv = GeometryXD.vecXDmod(vecXD)
        if (lv > 0):
            _g = 0
            while (_g < len(vecXD)):
                i = (vecXD[_g] if _g >= 0 and _g < len(vecXD) else None)
                _g = (_g + 1)
                rez.append((i / lv))
            return rez
        else:
            rez = vecXD
        return rez

    @staticmethod
    def vecXDfield(dots):
        rez = []
        _g1 = 1
        _g = len(dots)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            x = GeometryXD.vecXD((dots[0] if 0 < len(dots) else None),(dots[i] if i >= 0 and i < len(dots) else None))
            rez.append(x)
        return rez

    @staticmethod
    def vecXDsame(vecXDa,vecXDb):
        if (len(vecXDa) == len(vecXDb)):
            lv = len(vecXDa)
            _g1 = 0
            _g = lv
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                if ((vecXDa[i] if i >= 0 and i < len(vecXDa) else None) != (vecXDb[i] if i >= 0 and i < len(vecXDb) else None)):
                    return False
            return True
        return False

    @staticmethod
    def vecXDfieldsame(vecXDfield):
        if GeometryXD.vecXDfieldsamesize(vecXDfield):
            _g1 = 1
            _g = len(vecXDfield)
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                if (not GeometryXD.vecXDsame((vecXDfield[0] if 0 < len(vecXDfield) else None),(vecXDfield[i] if i >= 0 and i < len(vecXDfield) else None))):
                    return False
            return True
        return False

    @staticmethod
    def vecXDrandom(x = 3):
        if (x is None):
            x = 3
        _g = []
        _g2 = 0
        _g1 = x
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(0)
        v0 = _g
        _g11 = []
        _g3 = 0
        _g21 = x
        while (_g3 < _g21):
            i1 = _g3
            _g3 = (_g3 + 1)
            _g11.append(0)
        v1 = _g11
        while GeometryXD.vecXDsame(v0,v1):
            v1 = []
            _g31 = 0
            _g22 = x
            while (_g31 < _g22):
                i2 = _g31
                _g31 = (_g31 + 1)
                x1 = (python_lib_Random.random() - 0.5)
                v1.append(x1)
        v1 = GeometryXD.vecXDone(v1)
        return v1

    @staticmethod
    def vecXDsum(vecXDa,vecXDb):
        return GeometryXD.sum_xF([vecXDa, vecXDb])

    @staticmethod
    def vecXDfieldsum(vecXDfield):
        return GeometryXD.sum_xF(vecXDfield)

    @staticmethod
    def vecXDdiff(vecXDa,vecXDb):
        return GeometryXD.diff_xF([vecXDa, vecXDb])

    @staticmethod
    def vecXDfielddiff(vecXDfield):
        return GeometryXD.diff_xF(vecXDfield)

    @staticmethod
    def vecXDback(vecXD):
        return GeometryXD.minus_F(vecXD)

    @staticmethod
    def vecXDfieldback(vecXDfield):
        _g = []
        _g2 = 0
        _g1 = len(vecXDfield)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            x = GeometryXD.vecXDback((vecXDfield[i] if i >= 0 and i < len(vecXDfield) else None))
            _g.append(x)
        return _g

    @staticmethod
    def vecXDparalleled_sameside(vecXDa,vecXDb):
        rez = None
        if (len(vecXDa) != len(vecXDb)):
            return rez
        return GeometryXD.vecXDsame(GeometryXD.vecXDone(vecXDa),GeometryXD.vecXDone(vecXDb))

    @staticmethod
    def vecXDparalleled_opposite(vecXDa,vecXDb):
        rez = None
        if (len(vecXDa) != len(vecXDb)):
            return rez
        return GeometryXD.vecXDparalleled_sameside(vecXDa,GeometryXD.vecXDback(vecXDb))

    @staticmethod
    def vecXDparalleled(vecXDa,vecXDb):
        if (not GeometryXD.vecXDparalleled_sameside(vecXDa,vecXDb)):
            return GeometryXD.vecXDparalleled_opposite(vecXDa,vecXDb)
        else:
            return True

    @staticmethod
    def vecXDscalar(vecXDa,vecXDb):
        rez = None
        if (len(vecXDa) == len(vecXDb)):
            rez = 0
            _g1 = 0
            _g = len(vecXDa)
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                rez = (rez + (((vecXDa[i] if i >= 0 and i < len(vecXDa) else None) * (vecXDb[i] if i >= 0 and i < len(vecXDb) else None))))
        return rez

    @staticmethod
    def vecXDcos(vecXDa,vecXDb):
        rez = None
        la = GeometryXD.vecXDmod(vecXDa)
        lb = GeometryXD.vecXDmod(vecXDb)
        if ((la > 0) and ((lb > 0))):
            rez = GeometryXD.sin_cos_cut((GeometryXD.vecXDscalar(vecXDa,vecXDb) / ((la * lb))))
        return rez

    @staticmethod
    def vecXDangle(vecXDa,vecXDb,rad = False):
        if (rad is None):
            rad = False
        rez = None
        la = GeometryXD.vecXDmod(vecXDa)
        lb = GeometryXD.vecXDmod(vecXDb)
        if ((la > 0) and ((lb > 0))):
            if rad:
                rez = Math.acos(GeometryXD.vecXDcos(vecXDa,vecXDb))
            else:
                rez = GeometryXD.degrees(Math.acos(GeometryXD.vecXDcos(vecXDa,vecXDb)))
        return rez

    @staticmethod
    def vec3Dnormal(vec3Da,vec3Db):
        rez = None
        if ((len(vec3Da) == 3) and ((len(vec3Db) == 3))):
            a = (((vec3Da[1] if 1 < len(vec3Da) else None) * (vec3Db[2] if 2 < len(vec3Db) else None)) - (((vec3Da[2] if 2 < len(vec3Da) else None) * (vec3Db[1] if 1 < len(vec3Db) else None))))
            b = ((-(vec3Da[0] if 0 < len(vec3Da) else None) * (vec3Db[2] if 2 < len(vec3Db) else None)) + (((vec3Da[2] if 2 < len(vec3Da) else None) * (vec3Db[0] if 0 < len(vec3Db) else None))))
            c = (((vec3Da[0] if 0 < len(vec3Da) else None) * (vec3Db[1] if 1 < len(vec3Db) else None)) - (((vec3Da[1] if 1 < len(vec3Da) else None) * (vec3Db[0] if 0 < len(vec3Db) else None))))
            return GeometryXD.vecXDone([a, b, c])
        return rez

    @staticmethod
    def vec3Dfieldnormal(vec3Dfield):
        rez = None
        if (len((vec3Dfield[0] if 0 < len(vec3Dfield) else None)) == 3):
            rez1 = (vec3Dfield[0] if 0 < len(vec3Dfield) else None)
            _g1 = 1
            _g = len(vec3Dfield)
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                rez1 = GeometryXD.vec3Dnormal(rez1,(vec3Dfield[i] if i >= 0 and i < len(vec3Dfield) else None))
        return rez

    @staticmethod
    def vecXDmiddle(vecXDa,vecXDb):
        return GeometryXD.middle_xF([vecXDa, vecXDb])

    @staticmethod
    def vecXDsamesize(vecXDa,vecXDb):
        return (len(vecXDa) == len(vecXDb))

    @staticmethod
    def vecXDfieldsamesize(vecXDfield):
        thesize = len((vecXDfield[0] if 0 < len(vecXDfield) else None))
        _g1 = 1
        _g = len(vecXDfield)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if (thesize != len((vecXDfield[i] if i >= 0 and i < len(vecXDfield) else None))):
                return False
        return True

    @staticmethod
    def vecXDfieldmiddle(vecXDfield):
        return GeometryXD.middle_xF(vecXDfield)

    @staticmethod
    def dotXDoffset(dotXD,vecXD,t):
        rez = None
        if (t != 0):
            lv = len(vecXD)
            if (len(dotXD) == lv):
                rez = []
                t = (t / GeometryXD.vecXDmod(vecXD))
                _g1 = 0
                _g = lv
                while (_g1 < _g):
                    i = _g1
                    _g1 = (_g1 + 1)
                    rez.append(((dotXD[i] if i >= 0 and i < len(dotXD) else None) + (((vecXD[i] if i >= 0 and i < len(vecXD) else None) * t))))
            return rez
        else:
            return dotXD

    @staticmethod
    def dot3Dline3D_x_plane3D(dot3D0,vec3D0,vec3Dplane,dplane = 0):
        if (dplane is None):
            dplane = 0
        rez = None
        ldot = len(dot3D0)
        lvec = len(vec3D0)
        lplane = len(vec3Dplane)
        if (((ldot == 3) and ((ldot == lvec))) and ((lvec == lplane))):
            checkup = -((((((vec3Dplane[0] if 0 < len(vec3Dplane) else None) * (dot3D0[0] if 0 < len(dot3D0) else None)) + (((vec3Dplane[1] if 1 < len(vec3Dplane) else None) * (dot3D0[1] if 1 < len(dot3D0) else None)))) + (((vec3Dplane[2] if 2 < len(vec3Dplane) else None) * (dot3D0[2] if 2 < len(dot3D0) else None)))) + dplane))
            checkdn = ((((vec3Dplane[0] if 0 < len(vec3Dplane) else None) * (vec3D0[0] if 0 < len(vec3D0) else None)) + (((vec3Dplane[1] if 1 < len(vec3Dplane) else None) * (vec3D0[1] if 1 < len(vec3D0) else None)))) + (((vec3Dplane[2] if 2 < len(vec3Dplane) else None) * (vec3D0[2] if 2 < len(vec3D0) else None))))
            if (checkdn == 0):
                return rez
            elif (checkup == 0):
                return dot3D0
            else:
                t = (checkup / checkdn)
                _g = []
                _g1 = 0
                while (_g1 < 3):
                    i = _g1
                    _g1 = (_g1 + 1)
                    _g.append(((dot3D0[i] if i >= 0 and i < len(dot3D0) else None) + (((vec3D0[i] if i >= 0 and i < len(vec3D0) else None) * t))))
                rez = _g
        return rez

    @staticmethod
    def projection_dot3D_on_plane3D(dot3D,plane3D):
        rez = None
        ldot = len(dot3D)
        lplane = len(plane3D)
        if (((GeometryXD.vecXDmod(plane3D[0:3]) == 0) or ((ldot != 3))) or ((lplane != 4))):
            return rez
        checkup = (-GeometryXD.multisum_xF([plane3D[0:3], dot3D]) + (plane3D[3] if 3 < len(plane3D) else None))
        checkdn = GeometryXD.multisum_xF([plane3D[0:3], plane3D[0:3]])
        if (checkdn == 0):
            return rez
        elif (checkup == 0):
            return dot3D
        else:
            t = (checkup / checkdn)
            _g = []
            _g1 = 0
            while (_g1 < 3):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((dot3D[i] if i >= 0 and i < len(dot3D) else None) + (((plane3D[i] if i >= 0 and i < len(plane3D) else None) * t))))
            rez = _g
        return rez

    @staticmethod
    def dot3D_to_dot2Dviewplane(dot3D,dot3Dox,dot3Doz):
        rez = None
        t = GeometryXD.vecXDmod(dot3D)
        cosox0t = (GeometryXD.multisum_xF([dot3Dox, dot3D]) / ((t + GeometryXD.vecXDmod(dot3Dox))))
        cosoz0t = (GeometryXD.multisum_xF([dot3Doz, dot3D]) / ((t + GeometryXD.vecXDmod(dot3Doz))))
        rez = [(t * cosox0t), (t * cosoz0t)]
        return rez

    @staticmethod
    def dotXDscale(dotXD,scaleXD,dotXDc):
        rez = None
        _g = []
        _g2 = 0
        _g1 = len(dotXD)
        while (_g2 < _g1):
            i = _g2
            _g2 = (_g2 + 1)
            _g.append(((dotXD[i] if i >= 0 and i < len(dotXD) else None) * (scaleXD[i] if i >= 0 and i < len(scaleXD) else None)))
        sdot = _g
        _g11 = []
        _g3 = 0
        _g21 = len(dotXD)
        while (_g3 < _g21):
            i1 = _g3
            _g3 = (_g3 + 1)
            _g11.append(((dotXDc[i1] if i1 >= 0 and i1 < len(dotXDc) else None) * (scaleXD[i1] if i1 >= 0 and i1 < len(scaleXD) else None)))
        stc = _g11
        vec = GeometryXD.vecXD(stc,dotXDc)
        rez = GeometryXD.dotXDoffset(sdot,vec,GeometryXD.vecXDmod(vec))
        return rez

    @staticmethod
    def vec3Drotate(vec3D,vec3Daxis,angle,rad = False):
        if (rad is None):
            rad = False
        rez = None
        if GeometryXD.vecXDsame(vec3D,vec3Daxis):
            return rez
        rez = vec3D
        if (angle == 0):
            return rez
        if rad:
            angle = angle
        else:
            angle = GeometryXD.radians(angle)
        t = [0, 0, 0]
        vb = GeometryXD.vec3Dnormal(vec3Daxis,vec3D)
        vc = GeometryXD.vec3Dnormal(vb,vec3Daxis)
        t0 = GeometryXD.dotXDoffset(t,vec3Daxis,(GeometryXD.vecXDmod(vec3D) * GeometryXD.vecXDcos(vec3Daxis,vec3D)))
        t1 = vec3D
        v = GeometryXD.vecXD(t0,t1)
        t1 = GeometryXD.dotXDoffset(t0,vb,(GeometryXD.vecXDmod(v) * ((Math.NaN if (((angle == Math.POSITIVE_INFINITY) or ((angle == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(angle)))))
        t1 = GeometryXD.dotXDoffset(t1,vc,(GeometryXD.vecXDmod(v) * ((Math.NaN if (((angle == Math.POSITIVE_INFINITY) or ((angle == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(angle)))))
        rez = GeometryXD.vecXD(t,t1)
        return rez

    @staticmethod
    def dot3Drotate(dot3D,dot3Dc,vec3D,angle,rad = False):
        if (rad is None):
            rad = False
        rez = None
        if (GeometryXD.vecXDmod(vec3D) == 0):
            return rez
        rez = dot3D
        if (GeometryXD.vecXDsame(dot3D,dot3Dc) or ((angle == 0))):
            return rez
        vdot = GeometryXD.vecXD(dot3Dc,dot3D)
        d = GeometryXD.vecXDmod(vdot)
        vdot = GeometryXD.vec3Drotate(vdot,vec3D,angle,rad)
        rez = GeometryXD.dotXDoffset(dot3Dc,vdot,d)
        return rez

    @staticmethod
    def plane3D_dot3Dnormal(dot3D,vec3D):
        rez = None
        if (GeometryXD.vecXDmod(vec3D) == 0):
            return rez
        d = -GeometryXD.multisum_xF([vec3D, dot3D])
        rez = [(vec3D[0] if 0 < len(vec3D) else None), (vec3D[1] if 1 < len(vec3D) else None), (vec3D[2] if 2 < len(vec3D) else None), d]
        return rez

    @staticmethod
    def plane3D_dot_vec_vec(dot3D,vec3Da,vec3Db):
        rez = None
        if ((GeometryXD.vecXDsame(vec3Da,vec3Db) or ((GeometryXD.vecXDmod(vec3Da) == 0))) or ((GeometryXD.vecXDmod(vec3Db) == 0))):
            return rez
        rez = GeometryXD.plane3D_dot3Dnormal(dot3D,GeometryXD.vec3Dnormal(vec3Da,vec3Db))
        return rez

    @staticmethod
    def plane3D_3dots(dot3D,dot3Da,dot3Db):
        rez = None
        if ((((not GeometryXD.vecXDfieldsamesize([dot3D, dot3Da, dot3Db])) or GeometryXD.vecXDsame(dot3D,dot3Da)) or GeometryXD.vecXDsame(dot3D,dot3Db)) or GeometryXD.vecXDsame(dot3Da,dot3Db)):
            return rez
        rez = GeometryXD.plane3D_dot_vec_vec(dot3D,GeometryXD.vecXD(dot3D,dot3Da),GeometryXD.vecXD(dot3D,dot3Db))
        return rez

    @staticmethod
    def plane3D_2dots(dot3D,dot3Da):
        rez = None
        if ((not GeometryXD.vecXDsamesize(dot3D,dot3Da)) or GeometryXD.vecXDsame(dot3D,dot3Da)):
            return rez
        rez = GeometryXD.plane3D_dot3Dnormal(dot3D,GeometryXD.vecXD(dot3D,dot3Da))
        return rez

    @staticmethod
    def distance_dot3D_plane3D(dot3D,plane3D):
        rez = None
        if (GeometryXD.vecXDmod(plane3D[0:3]) == 0):
            return rez
        v = GeometryXD.multisum_xF([plane3D[0:3], dot3D])
        rez = (Reflect.field(Math,"fabs")((v + (plane3D[3] if 3 < len(plane3D) else None))) / GeometryXD.vecXDmod(plane3D[0:3]))
        return rez

    @staticmethod
    def random_vec3D_in_plane3D(plane3D):
        rez = None
        if (GeometryXD.vecXDmod(plane3D[0:3]) == 0):
            return rez
        t0 = GeometryXD.vecXDrandom(3)
        t0 = GeometryXD.projection_dot3D_on_plane3D(t0,plane3D)
        t1 = t0
        while GeometryXD.vecXDsame(t0,t1):
            t1 = []
            _g = 0
            while (_g < 3):
                i = _g
                _g = (_g + 1)
                x = (((t0[i] if i >= 0 and i < len(t0) else None) + python_lib_Random.random()) - 0.5)
                t1.append(x)
            t1 = GeometryXD.projection_dot3D_on_plane3D(t1,plane3D)
        rez = GeometryXD.vecXD(t0,t1)
        return rez

    @staticmethod
    def random_dot3D_in_plane3D(plane3D,dot3D,radius):
        rez = None
        if ((len(plane3D) != 4) or ((GeometryXD.vecXDmod(plane3D[0:3]) == 0))):
            return rez
        rez = dot3D
        if (radius == 0):
            return rez
        vec3D = GeometryXD.random_vec3D_in_plane3D(plane3D)
        rez = GeometryXD.dotXDoffset(dot3D,vec3D,(radius * python_lib_Random.random()))
        return rez

    @staticmethod
    def curve3Dbeziercubic(dot3D1,vec3D1,distance1,dot3D2,vec3D2,distance2):
        rez = None
        if ((not GeometryXD.vecXDfieldsamesize([dot3D1, vec3D1, dot3D2, vec3D2])) or ((len(dot3D1) != 3))):
            return rez
        r1 = GeometryXD.dotXDoffset(dot3D1,vec3D1,distance1)
        r2 = GeometryXD.dotXDoffset(dot3D2,vec3D2,distance2)
        rez = [dot3D1, r1, r2, dot3D2]
        return rez

    @staticmethod
    def curve3Dbeziercubic_3dots(dot3D0,dot3D1,dot3D2,lever1 = 0.55,lever2 = 0.55,a_s = -1):
        if (lever1 is None):
            lever1 = 0.55
        if (lever2 is None):
            lever2 = 0.55
        if (a_s is None):
            a_s = -1
        rez = None
        if ((not GeometryXD.vecXDfieldsamesize([dot3D0, dot3D1, dot3D2])) or ((len(dot3D0) != 3))):
            return rez
        v1 = GeometryXD.vecXD(dot3D0,dot3D1)
        v2 = GeometryXD.vecXD(dot3D0,dot3D2)
        v12 = GeometryXD.vecXD(dot3D1,dot3D2)
        t = GeometryXD.dotXDoffset(dot3D1,v12,(GeometryXD.vecXDmod(v12) / 2))
        v = GeometryXD.vecXD(dot3D0,t)
        r1 = None
        r2 = None
        if (a_s < 0):
            if (lever1 > 0):
                r1 = GeometryXD.dotXDoffset(dot3D1,v2,(GeometryXD.vecXDmod(v2) * lever1))
            elif (lever1 < 0):
                r1 = GeometryXD.dotXDoffset(dot3D1,v1,(GeometryXD.vecXDmod(v1) * lever1))
            else:
                r1 = dot3D1
            if (lever2 > 0):
                r2 = GeometryXD.dotXDoffset(dot3D2,v1,(GeometryXD.vecXDmod(v1) * lever2))
            elif (lever2 < 0):
                r2 = GeometryXD.dotXDoffset(dot3D2,v2,(GeometryXD.vecXDmod(v2) * lever2))
            else:
                r2 = dot3D2
        elif (a_s > 0):
            if (lever1 > 0):
                r1 = GeometryXD.dotXDoffset(dot3D1,v1,(GeometryXD.vecXDmod(v2) * lever1))
            elif (lever1 < 0):
                r1 = GeometryXD.dotXDoffset(dot3D1,v2,(GeometryXD.vecXDmod(v1) * lever1))
            else:
                r1 = dot3D1
            if (lever2 > 0):
                r2 = GeometryXD.dotXDoffset(dot3D2,v2,(GeometryXD.vecXDmod(v1) * lever2))
            elif (lever2 < 0):
                r2 = GeometryXD.dotXDoffset(dot3D2,v1,(GeometryXD.vecXDmod(v2) * lever2))
            else:
                r2 = dot3D2
        else:
            r1 = GeometryXD.dotXDoffset(dot3D1,v,(GeometryXD.vecXDmod(v) * lever1))
            r2 = GeometryXD.dotXDoffset(dot3D2,v,(GeometryXD.vecXDmod(v) * lever2))
        rez = [dot3D1, r1, r2, dot3D2]
        return rez

    @staticmethod
    def line3Dbeziercubic_2dots(dot3D0,dot3D1):
        rez = None
        if ((not GeometryXD.vecXDsamesize(dot3D0,dot3D1)) or ((len(dot3D0) != 3))):
            return rez
        v = GeometryXD.vecXD(dot3D0,dot3D1)
        lv = GeometryXD.vecXDmod(v)
        lever0 = GeometryXD.dotXDoffset(dot3D0,v,(lv / 3))
        lever1 = GeometryXD.dotXDoffset(dot3D0,v,((lv * 2) / 3))
        rez = [dot3D0, lever0, lever1, dot3D1]
        return rez

    @staticmethod
    def line3Dbeziercubic(dot3D,vec3D,distance):
        rez = None
        if ((((distance == 0) or (not GeometryXD.vecXDsamesize(dot3D,vec3D))) or ((len(dot3D) != 3))) or ((GeometryXD.vecXDmod(vec3D) == 0))):
            return rez
        rez = GeometryXD.line3Dbeziercubic_2dots(dot3D,GeometryXD.dotXDoffset(dot3D,vec3D,distance))
        return rez

    @staticmethod
    def beziercubic3D_4to12(curve):
        rez = None
        if (((len(curve) == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))) and GeometryXD.vecXDfieldsamesize(curve)):
            _g = []
            _g1 = 0
            while (_g1 < 4):
                i = _g1
                _g1 = (_g1 + 1)
                _g2 = 0
                while (_g2 < 3):
                    ai = _g2
                    _g2 = (_g2 + 1)
                    _g.append(python_internal_ArrayImpl._get((curve[i] if i >= 0 and i < len(curve) else None), ai))
            rez = _g
        return rez

    @staticmethod
    def beziercubic3D_12to4(curve):
        rez = None
        if (len(curve) == 12):
            _g = []
            _g1 = 0
            _g2 = [0, 3, 6, 9]
            while (_g1 < len(_g2)):
                i = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                _g3 = []
                _g4 = 0
                while (_g4 < 3):
                    ai = _g4
                    _g4 = (_g4 + 1)
                    _g3.append(python_internal_ArrayImpl._get(curve, (ai + i)))
                _g.append(_g3)
            rez = _g
        return rez

    @staticmethod
    def beziercubic3D_derivativeparameters(curve):
        rez = None
        cl = len(curve)
        if (((cl == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))) and GeometryXD.vecXDfieldsamesize(curve)):
            _g = []
            _g1 = 0
            while (_g1 < 3):
                i = _g1
                _g1 = (_g1 + 1)
                _g2 = []
                _g3 = 0
                while (_g3 < 4):
                    p = _g3
                    _g3 = (_g3 + 1)
                    _g2.append(python_internal_ArrayImpl._get((curve[p] if p >= 0 and p < len(curve) else None), i))
                _g.append(_g2)
            rez = _g
        return rez

    @staticmethod
    def beziercubic_derivative(bcp,p):
        rez = None
        if (len(bcp) == 4):
            rez = (((((3 * ((1 - p))) * ((1 - p))) * (((bcp[1] if 1 < len(bcp) else None) - (bcp[0] if 0 < len(bcp) else None)))) + ((((6 * ((1 - p))) * p) * (((bcp[2] if 2 < len(bcp) else None) - (bcp[1] if 1 < len(bcp) else None)))))) + ((((3 * p) * p) * (((bcp[3] if 3 < len(bcp) else None) - (bcp[2] if 2 < len(bcp) else None))))))
        return rez

    @staticmethod
    def beziercubic3D_derivative(curve,p):
        rez = None
        if (((len(curve) == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))) and GeometryXD.vecXDfieldsamesize(curve)):
            _g = []
            _g1 = 0
            _g2 = GeometryXD.beziercubic3D_derivativeparameters(curve)
            while (_g1 < len(_g2)):
                i = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
                _g1 = (_g1 + 1)
                x = GeometryXD.beziercubic_derivative(i,p)
                _g.append(x)
            rez = _g
        return rez

    @staticmethod
    def beziercubic_support_dot_one(beziercubic_one_axis_coordinates):
        c = beziercubic_one_axis_coordinates
        rez = None
        if (len(c) != 4):
            return rez
        return ((((((-5 * (c[0] if 0 < len(c) else None)) + ((18 * (c[1] if 1 < len(c) else None)))) - ((9 * (c[2] if 2 < len(c) else None)))) + ((2 * (c[3] if 3 < len(c) else None))))) / 6)

    @staticmethod
    def beziercubic3D_support_dot_one(curve3D_4dots):
        rez = None
        c = curve3D_4dots
        if ((len(c) != 4) or (not GeometryXD.vecXDfieldsamesize(c))):
            return rez
        _g = []
        _g1 = 0
        _g2 = GeometryXD.beziercubic3D_derivativeparameters(c)
        while (_g1 < len(_g2)):
            i = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
            _g1 = (_g1 + 1)
            x = GeometryXD.beziercubic_support_dot_one(i)
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def beziercubic_support_dot_two(beziercubic_one_axis_coordinates):
        c = beziercubic_one_axis_coordinates
        rez = None
        if (len(c) != 4):
            return rez
        return ((((((2 * (c[0] if 0 < len(c) else None)) - ((9 * (c[1] if 1 < len(c) else None)))) + ((18 * (c[2] if 2 < len(c) else None)))) - ((5 * (c[3] if 3 < len(c) else None))))) / 6)

    @staticmethod
    def beziercubic3D_support_dot_two(curve3D_4dots):
        rez = None
        c = curve3D_4dots
        if ((len(c) != 4) or (not GeometryXD.vecXDfieldsamesize(c))):
            return rez
        _g = []
        _g1 = 0
        _g2 = GeometryXD.beziercubic3D_derivativeparameters(c)
        while (_g1 < len(_g2)):
            i = (_g2[_g1] if _g1 >= 0 and _g1 < len(_g2) else None)
            _g1 = (_g1 + 1)
            x = GeometryXD.beziercubic_support_dot_two(i)
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def beziercubic3D_follow_4dots_trajectory(dots):
        rez = None
        if ((len(dots) != 4) or (not GeometryXD.vecXDfieldsamesize(dots))):
            return rez
        dot_one = GeometryXD.beziercubic3D_support_dot_one(dots)
        dot_two = GeometryXD.beziercubic3D_support_dot_two(dots)
        rez = [(dots[0] if 0 < len(dots) else None), dot_one, dot_two, (dots[3] if 3 < len(dots) else None)]
        return rez

    @staticmethod
    def projection_vec3D_on_plane3D(vec3D,plane3D):
        rez = None
        if ((len(vec3D) != 3) or ((len(plane3D) != 4))):
            return rez
        _g = []
        _g1 = 0
        while (_g1 < 3):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append((plane3D[i] if i >= 0 and i < len(plane3D) else None))
        vp = _g
        if ((GeometryXD.vecXDparalleled(vec3D,vp) or ((GeometryXD.vecXDmod(vec3D) == 0))) or ((GeometryXD.vecXDmod(vp) == 0))):
            return rez
        rez = vec3D
        t0 = [0, 0, 0]
        t1 = GeometryXD.dotXDoffset(t0,vec3D,1)
        t1 = GeometryXD.projection_dot3D_on_plane3D(t1,plane3D)
        rez = GeometryXD.vecXD(t0,t1)
        return rez

    @staticmethod
    def angle_vec3Dvec3D_projection_on_plane3D(vec3D1,vec3D2,plane3D,rad = False):
        if (rad is None):
            rad = False
        rez = None
        v1 = vec3D1
        v2 = vec3D2
        v1l = len(v1)
        v2l = len(v2)
        v1mod = GeometryXD.vecXDmod(v1)
        v2mod = GeometryXD.vecXDmod(v2)
        if ((((v1l != 3) or ((v2l != 3))) or ((v1mod == 0))) or ((v2mod == 0))):
            return rez
        p = plane3D
        if (len(p) < 3):
            return rez
        _g = []
        _g1 = 0
        while (_g1 < 3):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append((p[i] if i >= 0 and i < len(p) else None))
        vn = _g
        if (GeometryXD.vecXDmod(vn) == 0):
            return rez
        rez = 0
        if GeometryXD.vecXDparalleled_sameside(v1,v2):
            return rez
        pv1 = GeometryXD.projection_vec3D_on_plane3D(v1,vn)
        pv2 = GeometryXD.projection_vec3D_on_plane3D(v2,vn)
        pvn = (vn if (GeometryXD.vecXDparalleled(pv1,pv2)) else GeometryXD.vec3Dnormal(pv1,pv2))
        uvnpvn = GeometryXD.vecXDangle(vn,pvn,rad)
        uvv = GeometryXD.vecXDangle(v1,v2,rad)
        uznak = (GeometryXD.radians(90) if rad else 90)
        if (uvnpvn > uznak):
            rez = -uvv
        else:
            rez = uvv
        return rez


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                prefix = HxString.substr(x,0,2).lower()
                if (prefix == "0x"):
                    return int(x,16)
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                if (r is None):
                    r1 = Std.shortenPossibleNumber(x)
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g21 = _g2
                if (((((((((((_g21 == 57) or ((_g21 == 56))) or ((_g21 == 55))) or ((_g21 == 54))) or ((_g21 == 53))) or ((_g21 == 52))) or ((_g21 == 51))) or ((_g21 == 50))) or ((_g21 == 49))) or ((_g21 == 48))) or ((_g21 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        field1 = field
        _hx_local_0 = len(field1)
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        message = str(val)
        super().__init__(message)
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        return float('nan') if (b == 0.0) else a % b if a >= 0 else -(-a % b)

    @staticmethod
    def mod(a,b):
        return a % b if a >= 0 else -(-a % b)


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

GeometryXD.main()