// Generated by Haxe 3.4.4
(function ($hx_exports) { "use strict";
var GeometryXD = $hx_exports["GeometryXD"] = function() { };
GeometryXD.__name__ = true;
GeometryXD.main = function() {
	console.log("GeometryXD is ready for use");
};
GeometryXD.prototype = {
	positive_inside_I: function(a) {
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(i > 0) {
				return true;
			}
		}
		return false;
	}
	,zero_inside_I: function(a) {
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(i == 0) {
				return true;
			}
		}
		return false;
	}
	,negative_inside_I: function(a) {
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(i < 0) {
				return true;
			}
		}
		return false;
	}
	,positive_inside_F: function(a) {
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(i > 0) {
				return true;
			}
		}
		return false;
	}
	,zero_inside_F: function(a) {
		var rez = false;
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(i == 0) {
				rez = true;
			}
		}
		return rez;
	}
	,negative_inside_F: function(a) {
		var rez = false;
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(i < 0) {
				rez = true;
			}
		}
		return rez;
	}
	,same_size_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 1) {
			rez = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez = false;
					break;
				}
			}
		} else {
			rez = true;
		}
		return rez;
	}
	,same_size_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 1) {
			rez = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez = false;
				}
			}
		} else {
			rez = true;
		}
		return rez;
	}
	,same_xI: function(a) {
		var rez = null;
		var al = a.length;
		var tmp;
		if(al > 0) {
			var rez1 = null;
			var al1 = a.length;
			if(al1 > 1) {
				rez1 = true;
				var size = a[0].length;
				var _g1 = 1;
				var _g = al1;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != a[i].length) {
						rez1 = false;
						break;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			rez = true;
			var lv = a[0].length;
			var _g11 = 1;
			var _g2 = al;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var _g3 = 0;
				var _g21 = lv;
				while(_g3 < _g21) {
					var j = _g3++;
					if(rez) {
						if(a[0][j] != a[i1][j]) {
							rez = false;
						}
					} else {
						break;
					}
				}
				if(!rez) {
					break;
				}
			}
		}
		return rez;
	}
	,same_xF: function(a) {
		var rez = null;
		var al = a.length;
		var tmp;
		if(al > 0) {
			var rez1 = null;
			var al1 = a.length;
			if(al1 > 1) {
				rez1 = true;
				var size = a[0].length;
				var _g1 = 1;
				var _g = al1;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != a[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			rez = true;
			var lv = a[0].length;
			var _g11 = 1;
			var _g2 = al;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var _g3 = 0;
				var _g21 = lv;
				while(_g3 < _g21) {
					var j = _g3++;
					if(rez) {
						if(a[0][j] != a[i1][j]) {
							rez = false;
						}
					} else {
						break;
					}
				}
				if(!rez) {
					break;
				}
			}
		}
		return rez;
	}
	,sum_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = 0;
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez += a[i];
			}
		}
		return rez;
	}
	,sum_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = 0;
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez += a[i];
			}
		}
		return rez;
	}
	,diff_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			if(al == 1) {
				rez = a[0];
			} else {
				var a1 = a[0];
				var _g = [];
				var _g2 = 1;
				var _g1 = al;
				while(_g2 < _g1) {
					var i = _g2++;
					_g.push(a[i]);
				}
				var a2 = _g;
				var rez1 = null;
				var al1 = a2.length;
				if(al1 > 0) {
					rez1 = 0;
					var _g11 = 0;
					var _g3 = al1;
					while(_g11 < _g3) {
						var i1 = _g11++;
						rez1 += a2[i1];
					}
				}
				rez = a1 - rez1;
			}
		}
		return rez;
	}
	,diff_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			if(al == 1) {
				rez = a[0];
			} else {
				var a1 = a[0];
				var _g = [];
				var _g2 = 1;
				var _g1 = al;
				while(_g2 < _g1) {
					var i = _g2++;
					_g.push(a[i]);
				}
				var a2 = _g;
				var rez1 = null;
				var al1 = a2.length;
				if(al1 > 0) {
					rez1 = 0;
					var _g11 = 0;
					var _g3 = al1;
					while(_g11 < _g3) {
						var i1 = _g11++;
						rez1 += a2[i1];
					}
				}
				rez = a1 - rez1;
			}
		}
		return rez;
	}
	,middle_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var rez1 = null;
			var al1 = a.length;
			if(al1 > 0) {
				rez1 = 0;
				var _g1 = 0;
				var _g = al1;
				while(_g1 < _g) {
					var i = _g1++;
					rez1 += a[i];
				}
			}
			rez = rez1 / al;
		}
		return rez;
	}
	,multiply_I_I: function(a,n) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = al;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(a[i] * n);
			}
			rez = _g;
		}
		return rez;
	}
	,multiply_F_F: function(a,n) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = al;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(a[i] * n);
			}
			rez = _g;
		}
		return rez;
	}
	,multiply_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = a[0];
			if(al > 1) {
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					rez *= a[i];
				}
			}
		}
		return rez;
	}
	,multiply_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = a[0];
			if(al > 1) {
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					rez *= a[i];
				}
			}
		}
		return rez;
	}
	,minus_I: function(a) {
		var _g = [];
		var _g2 = 0;
		var _g1 = a.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(-a[i]);
		}
		return _g;
	}
	,minus_F: function(a) {
		var _g = [];
		var _g2 = 0;
		var _g1 = a.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(-a[i]);
		}
		return _g;
	}
	,sum_xI: function(a) {
		var rez = null;
		var rez1 = null;
		var al = a.length;
		if(al > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
					break;
				}
			}
		} else {
			rez1 = true;
		}
		if(rez1) {
			var _g2 = [];
			var _g21 = 0;
			var _g11 = a[0].length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var _g3 = [];
				var _g5 = 0;
				var _g4 = a.length;
				while(_g5 < _g4) {
					var ai = _g5++;
					_g3.push(a[ai][i1]);
				}
				var a1 = _g3;
				var rez2 = null;
				var al1 = a1.length;
				if(al1 > 0) {
					rez2 = 0;
					var _g12 = 0;
					var _g6 = al1;
					while(_g12 < _g6) {
						var i2 = _g12++;
						rez2 += a1[i2];
					}
				}
				_g2.push(rez2);
			}
			rez = _g2;
		}
		return rez;
	}
	,sum_xF: function(a) {
		var rez = null;
		var rez1 = null;
		var al = a.length;
		if(al > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
				}
			}
		} else {
			rez1 = true;
		}
		if(rez1) {
			var _g2 = [];
			var _g21 = 0;
			var _g11 = a[0].length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var _g3 = [];
				var _g5 = 0;
				var _g4 = a.length;
				while(_g5 < _g4) {
					var ai = _g5++;
					_g3.push(a[ai][i1]);
				}
				var a1 = _g3;
				var rez2 = null;
				var al1 = a1.length;
				if(al1 > 0) {
					rez2 = 0;
					var _g12 = 0;
					var _g6 = al1;
					while(_g12 < _g6) {
						var i2 = _g12++;
						rez2 += a1[i2];
					}
				}
				_g2.push(rez2);
			}
			rez = _g2;
		}
		return rez;
	}
	,diff_xI: function(a) {
		var rez = null;
		var rez1 = null;
		var al = a.length;
		if(al > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
					break;
				}
			}
		} else {
			rez1 = true;
		}
		if(rez1) {
			var _g2 = [];
			var _g21 = 0;
			var _g11 = a[0].length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var _g3 = [];
				var _g5 = 0;
				var _g4 = a.length;
				while(_g5 < _g4) {
					var ai = _g5++;
					_g3.push(a[ai][i1]);
				}
				_g2.push(this.diff_I(_g3));
			}
			rez = _g2;
		}
		return rez;
	}
	,diff_xF: function(a) {
		var rez = null;
		var rez1 = null;
		var al = a.length;
		if(al > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
				}
			}
		} else {
			rez1 = true;
		}
		if(rez1) {
			var _g2 = [];
			var _g21 = 0;
			var _g11 = a[0].length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var _g3 = [];
				var _g5 = 0;
				var _g4 = a.length;
				while(_g5 < _g4) {
					var ai = _g5++;
					_g3.push(a[ai][i1]);
				}
				_g2.push(this.diff_F(_g3));
			}
			rez = _g2;
		}
		return rez;
	}
	,middle_xF: function(a) {
		var rez = null;
		var tmp;
		if(a[0].length > 0) {
			var rez1 = null;
			var al = a.length;
			if(al > 1) {
				rez1 = true;
				var size = a[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != a[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g21 = 0;
			var _g11 = a[0].length;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var _g3 = [];
				var _g5 = 0;
				var _g4 = a.length;
				while(_g5 < _g4) {
					var ai = _g5++;
					_g3.push(a[ai][i1]);
				}
				_g2.push(this.middle_F(_g3));
			}
			rez = _g2;
		}
		return rez;
	}
	,multiply_xI_I: function(a,n) {
		var rez = null;
		if(a.length > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = a.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var a1 = a[i];
				var rez1 = null;
				var al = a1.length;
				if(al > 0) {
					var _g3 = [];
					var _g21 = 0;
					var _g11 = al;
					while(_g21 < _g11) {
						var i1 = _g21++;
						_g3.push(a1[i1] * n);
					}
					rez1 = _g3;
				}
				_g.push(rez1);
			}
			rez = _g;
		}
		return rez;
	}
	,multiply_xF_F: function(a,n) {
		var rez = null;
		if(a.length > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = a.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var a1 = a[i];
				var rez1 = null;
				var al = a1.length;
				if(al > 0) {
					var _g3 = [];
					var _g21 = 0;
					var _g11 = al;
					while(_g21 < _g11) {
						var i1 = _g21++;
						_g3.push(a1[i1] * n);
					}
					rez1 = _g3;
				}
				_g.push(rez1);
			}
			rez = _g;
		}
		return rez;
	}
	,multiply_xI: function(a) {
		var rez = null;
		var al = a.length;
		var rez1 = null;
		var al1 = a.length;
		if(al1 > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al1;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
					break;
				}
			}
		} else {
			rez1 = true;
		}
		if(rez1) {
			if(al > 1) {
				var _g2 = [];
				var _g21 = 0;
				var _g11 = a[0].length;
				while(_g21 < _g11) {
					var i1 = _g21++;
					var _g3 = [];
					var _g5 = 0;
					var _g4 = a.length;
					while(_g5 < _g4) {
						var ai = _g5++;
						_g3.push(a[ai][i1]);
					}
					var a1 = _g3;
					var rez2 = null;
					var al2 = a1.length;
					if(al2 > 0) {
						rez2 = a1[0];
						if(al2 > 1) {
							var _g12 = 1;
							var _g6 = al2;
							while(_g12 < _g6) {
								var i2 = _g12++;
								rez2 *= a1[i2];
							}
						}
					}
					_g2.push(rez2);
				}
				rez = _g2;
			} else if(al > 0) {
				rez = a[0];
			}
		}
		return rez;
	}
	,multiply_xF: function(a) {
		var rez = null;
		var al = a.length;
		var rez1 = null;
		var al1 = a.length;
		if(al1 > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al1;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
				}
			}
		} else {
			rez1 = true;
		}
		if(rez1) {
			if(al > 1) {
				var _g2 = [];
				var _g21 = 0;
				var _g11 = a[0].length;
				while(_g21 < _g11) {
					var i1 = _g21++;
					var _g3 = [];
					var _g5 = 0;
					var _g4 = a.length;
					while(_g5 < _g4) {
						var ai = _g5++;
						_g3.push(a[ai][i1]);
					}
					var a1 = _g3;
					var rez2 = null;
					var al2 = a1.length;
					if(al2 > 0) {
						rez2 = a1[0];
						if(al2 > 1) {
							var _g12 = 1;
							var _g6 = al2;
							while(_g12 < _g6) {
								var i2 = _g12++;
								rez2 *= a1[i2];
							}
						}
					}
					_g2.push(rez2);
				}
				rez = _g2;
			} else if(al > 0) {
				rez = a[0];
			}
		}
		return rez;
	}
	,multisum_xI: function(a) {
		var rez = null;
		var tmp;
		if(a.length > 1 && a[0].length > 0) {
			var rez1 = null;
			var al = a.length;
			if(al > 1) {
				rez1 = true;
				var size = a[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != a[i].length) {
						rez1 = false;
						break;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var a1 = this.multiply_xI(a);
			var rez2 = null;
			var al1 = a1.length;
			if(al1 > 0) {
				rez2 = 0;
				var _g11 = 0;
				var _g2 = al1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					rez2 += a1[i1];
				}
			}
			rez = rez2;
		}
		return rez;
	}
	,multisum_xF: function(a) {
		var rez = null;
		var tmp;
		if(a.length > 1 && a[0].length > 0) {
			var rez1 = null;
			var al = a.length;
			if(al > 1) {
				rez1 = true;
				var size = a[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != a[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var a1 = this.multiply_xF(a);
			var rez2 = null;
			var al1 = a1.length;
			if(al1 > 0) {
				rez2 = 0;
				var _g11 = 0;
				var _g2 = al1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					rez2 += a1[i1];
				}
			}
			rez = rez2;
		}
		return rez;
	}
	,sum_previous_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = al;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(i == 0 ? a[i] : a[i] + a[i - 1]);
			}
			rez = _g;
		}
		return rez;
	}
	,diff_previous_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = al;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(i == 0 ? a[i] : a[i] - a[i - 1]);
			}
			rez = _g;
		}
		return rez;
	}
	,sum_before_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = [0];
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez.push(rez[rez.length - 1] + a[i]);
			}
			rez.shift();
		}
		return rez;
	}
	,diff_before_I: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = [0];
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez.push(a[i] - rez[rez.length - 1]);
			}
			rez.shift();
		}
		return rez;
	}
	,sum_previous_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = al;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(i == 0 ? a[i] : a[i] + a[i - 1]);
			}
			rez = _g;
		}
		return rez;
	}
	,diff_previous_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = al;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(i == 0 ? a[i] : a[i] - a[i - 1]);
			}
			rez = _g;
		}
		return rez;
	}
	,sum_before_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = [0];
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez.push(rez[rez.length - 1] + a[i]);
			}
			rez.shift();
		}
		return rez;
	}
	,diff_before_F: function(a) {
		var rez = null;
		var al = a.length;
		if(al > 0) {
			rez = [0];
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez.push(a[i] - rez[rez.length - 1]);
			}
			rez.shift();
		}
		return rez;
	}
	,recounter_I_F: function(what) {
		var rez = [];
		var _g1 = 0;
		var _g = what.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(what[i]);
		}
		return rez;
	}
	,recounter_F_I: function(what) {
		var rez = [];
		var _g1 = 0;
		var _g = what.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(what[i] | 0);
		}
		return rez;
	}
	,recounter_I_S: function(what) {
		var rez = [];
		var _g1 = 0;
		var _g = what.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(Std.string(what[i]));
		}
		return rez;
	}
	,recounter_F_S: function(what) {
		var rez = [];
		var _g1 = 0;
		var _g = what.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(Std.string(what[i]));
		}
		return rez;
	}
	,recounter_S_I: function(what) {
		var rez = [];
		var _g1 = 0;
		var _g = what.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(Std.parseInt(what[i]));
		}
		return rez;
	}
	,recounter_S_F: function(what) {
		var rez = [];
		var _g1 = 0;
		var _g = what.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(parseFloat(what[i]));
		}
		return rez;
	}
	,repeater_F_F: function(n,what,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g = [];
		var _g2 = 0;
		var _g1 = ind;
		while(_g2 < _g1) {
			var _ = _g2++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i = _g4++;
				_g.push(what[i]);
			}
		}
		rez = _g;
		if(!full) {
			var _g11 = [];
			var _g31 = 0;
			var _g21 = n;
			while(_g31 < _g21) {
				var i1 = _g31++;
				_g11.push(rez[i1]);
			}
			rez = _g11;
		}
		return rez;
	}
	,repeater_I_I: function(n,what,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g = [];
		var _g2 = 0;
		var _g1 = ind;
		while(_g2 < _g1) {
			var _ = _g2++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i = _g4++;
				_g.push(what[i]);
			}
		}
		rez = _g;
		if(!full) {
			var _g11 = [];
			var _g31 = 0;
			var _g21 = n;
			while(_g31 < _g21) {
				var i1 = _g31++;
				_g11.push(rez[i1]);
			}
			rez = _g11;
		}
		return rez;
	}
	,repeater_S_S: function(n,what,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g = [];
		var _g2 = 0;
		var _g1 = ind;
		while(_g2 < _g1) {
			var _ = _g2++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i = _g4++;
				_g.push(what[i]);
			}
		}
		rez = _g;
		if(!full) {
			var _g11 = [];
			var _g31 = 0;
			var _g21 = n;
			while(_g31 < _g21) {
				var i1 = _g31++;
				_g11.push(rez[i1]);
			}
			rez = _g11;
		}
		return rez;
	}
	,repeater_F_I: function(n,what_,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		var rez1 = [];
		var _g1 = 0;
		var _g = what_.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez1.push(what_[i] | 0);
		}
		var what = rez1;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = ind;
		while(_g21 < _g11) {
			var _ = _g21++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i1 = _g4++;
				_g2.push(what[i1]);
			}
		}
		rez = _g2;
		if(!full) {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = n;
			while(_g31 < _g22) {
				var i2 = _g31++;
				_g12.push(rez[i2]);
			}
			rez = _g12;
		}
		return rez;
	}
	,repeater_S_I: function(n,what_,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		var rez1 = [];
		var _g1 = 0;
		var _g = what_.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez1.push(Std.parseInt(what_[i]));
		}
		var what = rez1;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = ind;
		while(_g21 < _g11) {
			var _ = _g21++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i1 = _g4++;
				_g2.push(what[i1]);
			}
		}
		rez = _g2;
		if(!full) {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = n;
			while(_g31 < _g22) {
				var i2 = _g31++;
				_g12.push(rez[i2]);
			}
			rez = _g12;
		}
		return rez;
	}
	,repeater_I_F: function(n,what_,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		var rez1 = [];
		var _g1 = 0;
		var _g = what_.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez1.push(what_[i]);
		}
		var what = rez1;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = ind;
		while(_g21 < _g11) {
			var _ = _g21++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i1 = _g4++;
				_g2.push(what[i1]);
			}
		}
		rez = _g2;
		if(!full) {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = n;
			while(_g31 < _g22) {
				var i2 = _g31++;
				_g12.push(rez[i2]);
			}
			rez = _g12;
		}
		return rez;
	}
	,repeater_S_F: function(n,what_,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		var rez1 = [];
		var _g1 = 0;
		var _g = what_.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez1.push(parseFloat(what_[i]));
		}
		var what = rez1;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = ind;
		while(_g21 < _g11) {
			var _ = _g21++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i1 = _g4++;
				_g2.push(what[i1]);
			}
		}
		rez = _g2;
		if(!full) {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = n;
			while(_g31 < _g22) {
				var i2 = _g31++;
				_g12.push(rez[i2]);
			}
			rez = _g12;
		}
		return rez;
	}
	,repeater_I_S: function(n,what_,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		var rez1 = [];
		var _g1 = 0;
		var _g = what_.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez1.push(Std.string(what_[i]));
		}
		var what = rez1;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = ind;
		while(_g21 < _g11) {
			var _ = _g21++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i1 = _g4++;
				_g2.push(what[i1]);
			}
		}
		rez = _g2;
		if(!full) {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = n;
			while(_g31 < _g22) {
				var i2 = _g31++;
				_g12.push(rez[i2]);
			}
			rez = _g12;
		}
		return rez;
	}
	,repeater_F_S: function(n,what_,full) {
		if(full == null) {
			full = false;
		}
		var rez = null;
		var rez1 = [];
		var _g1 = 0;
		var _g = what_.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez1.push(Std.string(what_[i]));
		}
		var what = rez1;
		if(n == 0) {
			return rez;
		}
		var wl = what.length;
		rez = [];
		if(wl == 0) {
			return rez;
		}
		if(n < 0) {
			what.reverse();
			n = Math.abs(n) | 0;
		}
		var ind = full ? n : Math.ceil(n / wl);
		var _g2 = [];
		var _g21 = 0;
		var _g11 = ind;
		while(_g21 < _g11) {
			var _ = _g21++;
			var _g4 = 0;
			var _g3 = wl;
			while(_g4 < _g3) {
				var i1 = _g4++;
				_g2.push(what[i1]);
			}
		}
		rez = _g2;
		if(!full) {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = n;
			while(_g31 < _g22) {
				var i2 = _g31++;
				_g12.push(rez[i2]);
			}
			rez = _g12;
		}
		return rez;
	}
	,an_in_b_S: function(a,b) {
		var rez = [];
		var al = a.length;
		var bl = b.length;
		if(al == 0 || bl == 0) {
			return null;
		}
		var _g1 = 0;
		var _g = al;
		while(_g1 < _g) {
			var ia = _g1++;
			var _g3 = 0;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ib = _g3++;
				if(a[ia] == b[ib]) {
					rez.push([ia,ib]);
				}
			}
		}
		return rez;
	}
	,an_in_bn_S: function(a,b) {
		var rez = [];
		var al = a.length;
		var bl = b.length;
		if(al == 0 || bl == 0) {
			return null;
		}
		var _g1 = 0;
		var _g = al;
		while(_g1 < _g) {
			var ia = _g1++;
			var _g3 = 0;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ib = _g3++;
				var _g5 = 0;
				var _g4 = b[ib].length;
				while(_g5 < _g4) {
					var ibn = _g5++;
					if(a[ia] == b[ib][ibn]) {
						rez.push([ia,ib,ibn]);
					}
				}
			}
		}
		return rez;
	}
	,an_in_b_I: function(a,b) {
		var rez = [];
		var al = a.length;
		var bl = b.length;
		if(al == 0 || bl == 0) {
			return null;
		}
		var _g1 = 0;
		var _g = al;
		while(_g1 < _g) {
			var ia = _g1++;
			var _g3 = 0;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ib = _g3++;
				if(a[ia] == b[ib]) {
					rez.push([ia,ib]);
				}
			}
		}
		return rez;
	}
	,an_in_bn_I: function(a,b) {
		var rez = [];
		var al = a.length;
		var bl = b.length;
		if(al == 0 || bl == 0) {
			return null;
		}
		var _g1 = 0;
		var _g = al;
		while(_g1 < _g) {
			var ia = _g1++;
			var _g3 = 0;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ib = _g3++;
				var _g5 = 0;
				var _g4 = b[ib].length;
				while(_g5 < _g4) {
					var ibn = _g5++;
					if(a[ia] == b[ib][ibn]) {
						rez.push([ia,ib,ibn]);
					}
				}
			}
		}
		return rez;
	}
	,an_in_b_F: function(a,b) {
		var rez = [];
		var al = a.length;
		var bl = b.length;
		if(al == 0 || bl == 0) {
			return null;
		}
		var _g1 = 0;
		var _g = al;
		while(_g1 < _g) {
			var ia = _g1++;
			var _g3 = 0;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ib = _g3++;
				if(a[ia] == b[ib]) {
					rez.push([ia,ib]);
				}
			}
		}
		return rez;
	}
	,an_in_bn_F: function(a,b) {
		var rez = [];
		var al = a.length;
		var bl = b.length;
		if(al == 0 || bl == 0) {
			return null;
		}
		var _g1 = 0;
		var _g = al;
		while(_g1 < _g) {
			var ia = _g1++;
			var _g3 = 0;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ib = _g3++;
				var _g5 = 0;
				var _g4 = b[ib].length;
				while(_g5 < _g4) {
					var ibn = _g5++;
					if(a[ia] == b[ib][ibn]) {
						rez.push([ia,ib,ibn]);
					}
				}
			}
		}
		return rez;
	}
	,chain_indexes: function(a_l,n,ring) {
		var rez = null;
		if(n > a_l || n < 1) {
			return rez;
		}
		var ind = [];
		var _g = [];
		var _g2 = 0;
		var _g1 = a_l;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(i);
		}
		var indring = _g;
		if(ring) {
			indring.push(0);
			var _g11 = [];
			var _g3 = 0;
			var _g21 = ((a_l + 1) / (n - 1) | 0) * (n - 1);
			while(_g3 < _g21) {
				var i1 = _g3++;
				var ind1;
				if(i1 % (n - 1) == 0 && i1 + n - 1 < a_l + 1) {
					ind1 = i1;
				} else {
					continue;
				}
				_g11.push(ind1);
			}
			ind = _g11;
		} else {
			var _g12 = [];
			var _g31 = 0;
			var _g22 = (a_l / (n - 1) | 0) * (n - 1);
			while(_g31 < _g22) {
				var i2 = _g31++;
				var ind2;
				if(i2 % (n - 1) == 0 && i2 + n - 1 < a_l) {
					ind2 = i2;
				} else {
					continue;
				}
				_g12.push(ind2);
			}
			ind = _g12;
		}
		var _g13 = [];
		var _g32 = 0;
		var _g23 = ind.length;
		while(_g32 < _g23) {
			var i3 = _g32++;
			var _g4 = [];
			var _g6 = 0;
			var _g5 = n;
			while(_g6 < _g5) {
				var j = _g6++;
				_g4.push(indring[ind[i3] + j]);
			}
			_g13.push(_g4);
		}
		rez = _g13;
		return rez;
	}
	,chain_S: function(a,n,ring) {
		if(ring == null) {
			ring = false;
		}
		var rez = null;
		var a_l = a.length;
		if(n > a_l || n < 1) {
			return rez;
		}
		var ind = this.chain_indexes(a_l,n,ring);
		var _g = [];
		var _g2 = 0;
		var _g1 = ind.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = n;
			while(_g5 < _g4) {
				var j = _g5++;
				_g3.push(a[ind[i][j]]);
			}
			_g.push(_g3);
		}
		rez = _g;
		return rez;
	}
	,chain_I: function(a,n,ring) {
		if(ring == null) {
			ring = false;
		}
		var rez = null;
		var a_l = a.length;
		if(n > a_l || n < 1) {
			return rez;
		}
		var ind = this.chain_indexes(a_l,n,ring);
		var _g = [];
		var _g2 = 0;
		var _g1 = ind.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = n;
			while(_g5 < _g4) {
				var j = _g5++;
				_g3.push(a[ind[i][j]]);
			}
			_g.push(_g3);
		}
		rez = _g;
		return rez;
	}
	,chain_F: function(a,n,ring) {
		if(ring == null) {
			ring = false;
		}
		var rez = null;
		var a_l = a.length;
		if(n > a_l || n < 1) {
			return rez;
		}
		var ind = this.chain_indexes(a_l,n,ring);
		var _g = [];
		var _g2 = 0;
		var _g1 = ind.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = n;
			while(_g5 < _g4) {
				var j = _g5++;
				_g3.push(a[ind[i][j]]);
			}
			_g.push(_g3);
		}
		rez = _g;
		return rez;
	}
	,steps_internal: function(xmin,xmax,n,borders) {
		if(borders == null) {
			borders = false;
		}
		var rez = null;
		if(n < 1) {
			return rez;
		}
		var st = (xmax - xmin) / (n + 1);
		if(borders) {
			var _g = [];
			var _g2 = 0;
			var _g1 = n + 2;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(i > 0 && i < n + 1 ? xmin + st * i : i == 0 ? xmin : xmax);
			}
			rez = _g;
		} else {
			var _g3 = [];
			var _g21 = 1;
			var _g11 = n + 1;
			while(_g21 < _g11) {
				var i1 = _g21++;
				_g3.push(xmin + st * i1);
			}
			rez = _g3;
		}
		return rez;
	}
	,steps_external: function(smin,smax,n,direction) {
		var rez = null;
		if(n < 1 || direction < -1 || direction > 1) {
			return rez;
		}
		var st = smax - smin;
		if(direction > 0) {
			var _g = [];
			var _g2 = 0;
			var _g1 = n + 2;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(smin + st * i);
			}
			rez = _g;
		} else if(direction < 0) {
			var full = smin - st * n;
			var _g3 = [];
			var _g21 = 0;
			var _g11 = n + 2;
			while(_g21 < _g11) {
				var i1 = _g21++;
				_g3.push(full + st * i1);
			}
			rez = _g3;
		} else {
			var full1 = smin - st * n;
			var _g4 = [];
			var _g12 = 0;
			while(_g12 < 2) {
				var b = _g12++;
				var _g31 = 0;
				var _g22 = n + 2;
				while(_g31 < _g22) {
					var i2 = _g31++;
					var rez1;
					if(b == 0) {
						rez1 = full1 + st * i2;
					} else if(i2 > 1) {
						rez1 = smin + st * i2;
					} else {
						continue;
					}
					_g4.push(rez1);
				}
			}
			rez = _g4;
		}
		return rez;
	}
	,sign_I: function(x) {
		if(x < 0) {
			return -1;
		} else {
			return 1;
		}
	}
	,sign_F: function(x) {
		if(x < 0) {
			return -1;
		} else {
			return 1;
		}
	}
	,sign3_I: function(x) {
		if(x < 0) {
			return -1;
		} else if(x > 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,sign3_F: function(x) {
		if(x < 0) {
			return -1;
		} else if(x > 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,sin_cos_cut: function(x) {
		if(x > 1) {
			return 1;
		} else if(x < -1) {
			return -1;
		} else {
			return x;
		}
	}
	,degrees: function(angle) {
		return angle * 180 / Math.PI;
	}
	,radians: function(angle) {
		return angle / 180 * Math.PI;
	}
	,angle_quadrant: function(angle,rad) {
		if(rad == null) {
			rad = false;
		}
		var k = 4;
		if(rad) {
			angle = angle * 180 / Math.PI;
		}
		var x = angle % 360;
		if(x > 270) {
			k = 4;
		} else if(x > 180) {
			k = 3;
		} else if(x > 90) {
			k = 2;
		} else if(x > 0) {
			k = 1;
		} else if(x <= -270) {
			k = 1;
		} else if(x <= -180) {
			k = 2;
		} else if(x <= -90) {
			k = 3;
		} else if(x <= 0) {
			k = 4;
		}
		return k;
	}
	,vecXDnorm: function(vecXD) {
		var sum = 0;
		var _g = 0;
		while(_g < vecXD.length) {
			var i = vecXD[_g];
			++_g;
			sum += i * i;
		}
		return Math.sqrt(sum);
	}
	,vecXDfieldnorm: function(vecXDfield) {
		var rez = null;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vecXDfield.length) {
			var i = vecXDfield[_g1];
			++_g1;
			_g.push(this.vecXDnorm(i));
		}
		rez = _g;
		return rez;
	}
	,zero_vector_inside: function(vecXDfield) {
		var rez = null;
		var lv = vecXDfield.length;
		if(lv > 0) {
			rez = false;
			var _g1 = 0;
			var _g = lv;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.vecXDnorm(vecXDfield[i]) == 0) {
					rez = true;
					break;
				}
			}
		}
		return rez;
	}
	,maxabs: function(a) {
		var rez = 0;
		var _g = 0;
		while(_g < a.length) {
			var i = a[_g];
			++_g;
			if(Math.abs(i) > Math.abs(rez)) {
				rez = i;
			}
		}
		return rez;
	}
	,vecXD: function(dotXDa,dotXDb) {
		var rez = null;
		if(!this.vecXDsamesize(dotXDa,dotXDb)) {
			return rez;
		}
		rez = [];
		var _g1 = 0;
		var _g = dotXDa.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(dotXDb[i] - dotXDa[i]);
		}
		return rez;
	}
	,vecXDone: function(vecXD) {
		var rez = [];
		var lv = this.vecXDnorm(vecXD);
		if(lv > 0) {
			var _g = 0;
			while(_g < vecXD.length) {
				var i = vecXD[_g];
				++_g;
				rez.push(i / lv);
			}
			return rez;
		} else {
			rez = vecXD;
		}
		return rez;
	}
	,vecXDfield: function(dots) {
		var rez = [];
		var _g1 = 1;
		var _g = dots.length;
		while(_g1 < _g) {
			var i = _g1++;
			rez.push(this.vecXD(dots[0],dots[i]));
		}
		return rez;
	}
	,vecXDsame: function(vecXDa,vecXDb) {
		var rez = null;
		if(vecXDa.length == vecXDb.length) {
			rez = this.same_xF([vecXDa,vecXDb]);
		}
		return rez;
	}
	,vecXDfieldsame: function(vecXDfield) {
		return this.same_xF(vecXDfield);
	}
	,vecXDrandom: function(x) {
		if(x == null) {
			x = 3;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = x;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0);
		}
		var v0 = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = x;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(0);
		}
		var v1 = _g11;
		while(true) {
			var rez = null;
			if(v0.length == v1.length) {
				rez = this.same_xF([v0,v1]);
			}
			if(!rez) {
				break;
			}
			v1 = [];
			var _g31 = 0;
			var _g22 = x;
			while(_g31 < _g22) {
				var i2 = _g31++;
				v1.push(Math.random() - 0.5);
			}
		}
		v1 = this.vecXDone(v1);
		return v1;
	}
	,vecXDsum: function(vecXDa,vecXDb) {
		return this.sum_xF([vecXDa,vecXDb]);
	}
	,vecXDfieldsum: function(vecXDfield) {
		return this.sum_xF(vecXDfield);
	}
	,vecXDdiff: function(vecXDa,vecXDb) {
		return this.diff_xF([vecXDa,vecXDb]);
	}
	,vecXDfielddiff: function(vecXDfield) {
		return this.diff_xF(vecXDfield);
	}
	,vecXDback: function(vecXD) {
		var _g = [];
		var _g2 = 0;
		var _g1 = vecXD.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(-vecXD[i]);
		}
		return _g;
	}
	,vecXDfieldback: function(vecXDfield) {
		var _g = [];
		var _g2 = 0;
		var _g1 = vecXDfield.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.vecXDback(vecXDfield[i]));
		}
		return _g;
	}
	,vecXDparalleled_sameside: function(vecXDa,vecXDb) {
		var rez = null;
		if(vecXDa.length != vecXDb.length) {
			return rez;
		}
		var vecXDa1 = this.vecXDone(vecXDa);
		var vecXDb1 = this.vecXDone(vecXDb);
		var rez1 = null;
		if(vecXDa1.length == vecXDb1.length) {
			rez1 = this.same_xF([vecXDa1,vecXDb1]);
		}
		return rez1;
	}
	,vecXDparalleled_opposite: function(vecXDa,vecXDb) {
		var rez = null;
		if(vecXDa.length != vecXDb.length) {
			return rez;
		}
		return this.vecXDparalleled_sameside(vecXDa,this.vecXDback(vecXDb));
	}
	,vecXDparalleled: function(vecXDa,vecXDb) {
		if(!this.vecXDparalleled_sameside(vecXDa,vecXDb)) {
			return this.vecXDparalleled_opposite(vecXDa,vecXDb);
		} else {
			return true;
		}
	}
	,vecXDscalar: function(vecXDa,vecXDb) {
		var rez = null;
		if(vecXDa.length == vecXDb.length) {
			rez = 0;
			var _g1 = 0;
			var _g = vecXDa.length;
			while(_g1 < _g) {
				var i = _g1++;
				rez += vecXDa[i] * vecXDb[i];
			}
		}
		return rez;
	}
	,vecXDcos: function(vecXDa,vecXDb) {
		var rez = null;
		var la = this.vecXDnorm(vecXDa);
		var lb = this.vecXDnorm(vecXDb);
		if(la > 0 && lb > 0) {
			var x = this.vecXDscalar(vecXDa,vecXDb) / (la * lb);
			if(x > 1) {
				rez = 1;
			} else if(x < -1) {
				rez = -1;
			} else {
				rez = x;
			}
		}
		return rez;
	}
	,vecXDangle: function(vecXDa,vecXDb,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var la = this.vecXDnorm(vecXDa);
		var lb = this.vecXDnorm(vecXDb);
		if(la > 0 && lb > 0) {
			if(rad) {
				rez = Math.acos(this.vecXDcos(vecXDa,vecXDb));
			} else {
				rez = Math.acos(this.vecXDcos(vecXDa,vecXDb)) * 180 / Math.PI;
			}
		}
		return rez;
	}
	,vec3Dnormal: function(vec3Da,vec3Db) {
		var rez = null;
		if(vec3Da.length == 3 && vec3Db.length == 3) {
			var a = vec3Da[1] * vec3Db[2] - vec3Da[2] * vec3Db[1];
			var b = -vec3Da[0] * vec3Db[2] + vec3Da[2] * vec3Db[0];
			var c = vec3Da[0] * vec3Db[1] - vec3Da[1] * vec3Db[0];
			return this.vecXDone([a,b,c]);
		}
		return rez;
	}
	,vec3Dfieldnormal: function(vec3Dfield) {
		var rez = null;
		var tmp;
		if(vec3Dfield[0].length == 3) {
			var rez1 = null;
			var al = vec3Dfield.length;
			if(al > 1) {
				rez1 = true;
				var size = vec3Dfield[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != vec3Dfield[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			rez = vec3Dfield[0];
			var _g11 = 1;
			var _g2 = vec3Dfield.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				rez = this.vec3Dnormal(rez,vec3Dfield[i1]);
			}
		}
		return rez;
	}
	,vecXDmiddle: function(vecXDa,vecXDb) {
		return this.middle_xF([vecXDa,vecXDb]);
	}
	,vecXDfieldmiddle: function(vecXDfield) {
		return this.middle_xF(vecXDfield);
	}
	,vecXDsamesize: function(vecXDa,vecXDb) {
		var a = [vecXDa,vecXDb];
		var rez = null;
		var al = a.length;
		if(al > 1) {
			rez = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez = false;
				}
			}
		} else {
			rez = true;
		}
		return rez;
	}
	,vecXDfieldsamesize: function(vecXDfield) {
		var rez = null;
		var al = vecXDfield.length;
		if(al > 1) {
			rez = true;
			var size = vecXDfield[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != vecXDfield[i].length) {
					rez = false;
				}
			}
		} else {
			rez = true;
		}
		return rez;
	}
	,dotXDoffset: function(dotXD,vecXD,t) {
		var rez = null;
		if(t != 0) {
			var lv = vecXD.length;
			if(dotXD.length == lv) {
				rez = [];
				t /= this.vecXDnorm(vecXD);
				var _g1 = 0;
				var _g = lv;
				while(_g1 < _g) {
					var i = _g1++;
					rez.push(dotXD[i] + vecXD[i] * t);
				}
			}
			return rez;
		} else {
			return dotXD;
		}
	}
	,dot3Dline3D_x_plane3D: function(dot3D0,vec3D0,vec3Dplane,dplane) {
		if(dplane == null) {
			dplane = 0;
		}
		var rez = null;
		var ldot = dot3D0.length;
		var lvec = vec3D0.length;
		var lplane = vec3Dplane.length;
		if(ldot == 3 && ldot == lvec && lvec == lplane) {
			var checkup = -(vec3Dplane[0] * dot3D0[0] + vec3Dplane[1] * dot3D0[1] + vec3Dplane[2] * dot3D0[2] + dplane);
			var checkdn = vec3Dplane[0] * vec3D0[0] + vec3Dplane[1] * vec3D0[1] + vec3Dplane[2] * vec3D0[2];
			if(checkdn == 0) {
				return rez;
			} else if(checkup == 0) {
				return dot3D0;
			} else {
				var t = checkup / checkdn;
				var _g = [];
				var _g1 = 0;
				while(_g1 < 3) {
					var i = _g1++;
					_g.push(dot3D0[i] + vec3D0[i] * t);
				}
				rez = _g;
			}
		}
		return rez;
	}
	,projection_dot3D_on_plane3D: function(dot3D,plane3D) {
		var rez = null;
		var ldot = dot3D.length;
		var lplane = plane3D.length;
		if(this.vecXDnorm(plane3D.slice(0,3)) == 0 || ldot != 3 || lplane != 4) {
			return rez;
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < 3) {
			var i = _g1++;
			_g.push(plane3D[i]);
		}
		var checkup = -(this.multisum_xF([_g,dot3D]) + plane3D[3]);
		var _g11 = [];
		var _g2 = 0;
		while(_g2 < 3) {
			var i1 = _g2++;
			_g11.push(plane3D[i1]);
		}
		var checkdn = _g11;
		var _g21 = [];
		var _g3 = 0;
		while(_g3 < 3) {
			var i2 = _g3++;
			_g21.push(plane3D[i2]);
		}
		var checkdn1 = this.multisum_xF([checkdn,_g21]);
		if(checkdn1 == 0) {
			return rez;
		} else if(checkup == 0) {
			return dot3D;
		} else {
			var t = checkup / checkdn1;
			var _g31 = [];
			var _g4 = 0;
			while(_g4 < 3) {
				var i3 = _g4++;
				_g31.push(dot3D[i3] + plane3D[i3] * t);
			}
			rez = _g31;
		}
		return rez;
	}
	,dot3D_to_dot2Dviewplane: function(dot3D,dot3Dox,dot3Doz) {
		var rez = null;
		var t = this.vecXDnorm(dot3D);
		var cosox0t = this.multisum_xF([dot3Dox,dot3D]) / (t + this.vecXDnorm(dot3Dox));
		var cosoz0t = this.multisum_xF([dot3Doz,dot3D]) / (t + this.vecXDnorm(dot3Doz));
		rez = [t * cosox0t,t * cosoz0t];
		return rez;
	}
	,dotXDscale: function(dotXD,scaleXD,dotXDc) {
		var rez = null;
		var _g = [];
		var _g2 = 0;
		var _g1 = dotXD.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(dotXD[i] * scaleXD[i]);
		}
		var sdot = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = dotXD.length;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(dotXDc[i1] * scaleXD[i1]);
		}
		var stc = _g11;
		var vec = this.vecXD(stc,dotXDc);
		rez = this.dotXDoffset(sdot,vec,this.vecXDnorm(vec));
		return rez;
	}
	,vec3Drotate: function(vec3D,vec3Daxis,angle,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = vec3D;
		if(this.vecXDparalleled(vec3D,vec3Daxis) || angle == 0) {
			return rez;
		}
		if(rad) {
			angle = angle;
		} else {
			angle = angle / 180 * Math.PI;
		}
		var t = [0,0,0];
		var vb = this.vec3Dnormal(vec3Daxis,vec3D);
		var vc = this.vec3Dnormal(vb,vec3Daxis);
		var t0 = this.dotXDoffset(t,vec3Daxis,this.vecXDnorm(vec3D) * this.vecXDcos(vec3Daxis,vec3D));
		var t1 = vec3D;
		var v = this.vecXD(t0,t1);
		t1 = this.dotXDoffset(t0,vb,this.vecXDnorm(v) * Math.sin(angle));
		t1 = this.dotXDoffset(t1,vc,this.vecXDnorm(v) * Math.cos(angle));
		rez = this.vecXD(t,t1);
		return rez;
	}
	,vec3Dfield_rotate_around_vec3Daxes: function(vec3Dfield,vec3Daxes,angles,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		var tmp4;
		var tmp5;
		var tmp6;
		var rez1 = null;
		var al = vec3Dfield.length;
		if(al > 1) {
			rez1 = true;
			var size = vec3Dfield[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != vec3Dfield[i].length) {
					rez1 = false;
				}
			}
		} else {
			rez1 = true;
		}
		if(!(!rez1)) {
			var rez2 = null;
			var al1 = vec3Daxes.length;
			if(al1 > 1) {
				rez2 = true;
				var size1 = vec3Daxes[0].length;
				var _g11 = 1;
				var _g2 = al1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(size1 != vec3Daxes[i1].length) {
						rez2 = false;
					}
				}
			} else {
				rez2 = true;
			}
			tmp6 = !rez2;
		} else {
			tmp6 = true;
		}
		if(!tmp6) {
			tmp5 = vec3Dfield[0].length != 3;
		} else {
			tmp5 = true;
		}
		if(!tmp5) {
			tmp4 = vec3Daxes[0].length != 3;
		} else {
			tmp4 = true;
		}
		if(!tmp4) {
			var rez3 = null;
			var _g3 = [];
			var _g12 = 0;
			while(_g12 < vec3Dfield.length) {
				var i2 = vec3Dfield[_g12];
				++_g12;
				_g3.push(this.vecXDnorm(i2));
			}
			rez3 = _g3;
			var a = rez3;
			var rez4 = false;
			var _g4 = 0;
			while(_g4 < a.length) {
				var i3 = a[_g4];
				++_g4;
				if(i3 == 0) {
					rez4 = true;
				}
			}
			tmp3 = rez4;
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			var rez5 = null;
			var _g5 = [];
			var _g13 = 0;
			while(_g13 < vec3Daxes.length) {
				var i4 = vec3Daxes[_g13];
				++_g13;
				_g5.push(this.vecXDnorm(i4));
			}
			rez5 = _g5;
			var a1 = rez5;
			var rez6 = false;
			var _g6 = 0;
			while(_g6 < a1.length) {
				var i5 = a1[_g6];
				++_g6;
				if(i5 == 0) {
					rez6 = true;
				}
			}
			tmp2 = rez6;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			tmp1 = angles.length != vec3Dfield.length;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			tmp = angles.length != vec3Daxes.length;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		rez = vec3Dfield;
		var _g14 = 0;
		var _g7 = angles.length;
		while(_g14 < _g7) {
			var i6 = _g14++;
			var _g31 = 0;
			var _g21 = vec3Dfield.length;
			while(_g31 < _g21) {
				var j = _g31++;
				rez[j] = this.vec3Drotate(rez[j],vec3Daxes[i6],angles[i6],rad);
			}
		}
		return rez;
	}
	,dot3Drotate: function(dot3D,dot3Dc,vec3D,angle,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		if(this.vecXDnorm(vec3D) == 0) {
			return rez;
		}
		rez = dot3D;
		var tmp;
		var rez1 = null;
		if(dot3D.length == dot3Dc.length) {
			rez1 = this.same_xF([dot3D,dot3Dc]);
		}
		if(!rez1) {
			tmp = angle == 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		var vdot = this.vecXD(dot3Dc,dot3D);
		var d = this.vecXDnorm(vdot);
		vdot = this.vec3Drotate(vdot,vec3D,angle,rad);
		rez = this.dotXDoffset(dot3Dc,vdot,d);
		return rez;
	}
	,plane3D_dot3Dnormal: function(dot3D,vec3D) {
		var rez = null;
		if(dot3D.length != 3 || vec3D.length != 3 || this.vecXDnorm(vec3D) == 0) {
			return rez;
		}
		var d = -this.multisum_xF([vec3D,dot3D]);
		rez = [vec3D[0],vec3D[1],vec3D[2],d];
		return rez;
	}
	,plane3D_dot_vec_vec: function(dot3D,vec3Da,vec3Db) {
		var rez = null;
		if(dot3D.length != 3 || vec3Da.length != 3 || vec3Db.length != 3 || this.vecXDparalleled(vec3Da,vec3Db) || this.vecXDnorm(vec3Da) == 0 || this.vecXDnorm(vec3Db) == 0) {
			return rez;
		}
		rez = this.plane3D_dot3Dnormal(dot3D,this.vec3Dnormal(vec3Da,vec3Db));
		return rez;
	}
	,plane3D_3dots: function(dot3D,dot3Da,dot3Db) {
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		if(dot3D.length == 3) {
			var a = [dot3D,dot3Da,dot3Db];
			var rez1 = null;
			var al = a.length;
			if(al > 1) {
				rez1 = true;
				var size = a[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != a[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp3 = !rez1;
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			var rez2 = null;
			if(dot3D.length == dot3Da.length) {
				rez2 = this.same_xF([dot3D,dot3Da]);
			}
			tmp2 = rez2;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			var rez3 = null;
			if(dot3D.length == dot3Db.length) {
				rez3 = this.same_xF([dot3D,dot3Db]);
			}
			tmp1 = rez3;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var rez4 = null;
			if(dot3Da.length == dot3Db.length) {
				rez4 = this.same_xF([dot3Da,dot3Db]);
			}
			tmp = rez4;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		rez = this.plane3D_dot_vec_vec(dot3D,this.vecXD(dot3D,dot3Da),this.vecXD(dot3D,dot3Db));
		return rez;
	}
	,plane3D_2dots: function(dot3D,dot3Da) {
		var rez = null;
		var tmp;
		if(!(!this.vecXDsamesize(dot3D,dot3Da))) {
			var rez1 = null;
			if(dot3D.length == dot3Da.length) {
				rez1 = this.same_xF([dot3D,dot3Da]);
			}
			tmp = rez1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		rez = this.plane3D_dot3Dnormal(dot3D,this.vecXD(dot3D,dot3Da));
		return rez;
	}
	,distance_dot3D_plane3D: function(dot3D,plane3D) {
		var rez = null;
		if(dot3D.length != 3 || plane3D.length != 4 || this.vecXDnorm([plane3D[0],plane3D[1],plane3D[2]]) == 0) {
			return rez;
		}
		rez = Math.abs(this.multisum_xF([[plane3D[0],plane3D[1],plane3D[2]],dot3D]) + plane3D[3]) / this.vecXDnorm([plane3D[0],plane3D[1],plane3D[2]]);
		return rez;
	}
	,random_vec3D_in_plane3D: function(plane3D) {
		var rez = null;
		if(plane3D.length != 4 || this.vecXDnorm([plane3D[0],plane3D[1],plane3D[2]]) == 0) {
			return rez;
		}
		var t0 = this.vecXDrandom(3);
		t0 = this.projection_dot3D_on_plane3D(t0,plane3D);
		var t1 = t0;
		while(true) {
			var rez1 = null;
			if(t0.length == t1.length) {
				rez1 = this.same_xF([t0,t1]);
			}
			if(!rez1) {
				break;
			}
			t1 = [];
			var _g = 0;
			while(_g < 3) {
				var i = _g++;
				t1.push(t0[i] + Math.random() - 0.5);
			}
			t1 = this.projection_dot3D_on_plane3D(t1,plane3D);
		}
		rez = this.vecXD(t0,t1);
		return rez;
	}
	,random_dot3D_in_plane3D: function(plane3D,dot3D,radius) {
		var rez = null;
		if(plane3D.length != 4 || this.vecXDnorm([plane3D[0],plane3D[1],plane3D[2]]) == 0) {
			return rez;
		}
		rez = this.projection_dot3D_on_plane3D(dot3D,plane3D);
		if(radius == 0) {
			return rez;
		}
		var vec3D = this.random_vec3D_in_plane3D(plane3D);
		rez = this.dotXDoffset(dot3D,vec3D,radius * Math.random());
		return rez;
	}
	,curve3D_4dots: function(dot3D1,vec3D1,distance1,dot3D2,vec3D2,distance2) {
		var rez = null;
		var tmp;
		var a = [dot3D1,vec3D1,dot3D2,vec3D2];
		var rez1 = null;
		var al = a.length;
		if(al > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
				}
			}
		} else {
			rez1 = true;
		}
		if(!(!rez1)) {
			tmp = dot3D1.length != 3;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		var r1 = this.dotXDoffset(dot3D1,vec3D1,distance1);
		var r2 = this.dotXDoffset(dot3D2,vec3D2,distance2);
		rez = [dot3D1,r1,r2,dot3D2];
		return rez;
	}
	,curve3D_3dots: function(dot3D0,dot3D1,dot3D2,lever1,lever2,a_s) {
		if(a_s == null) {
			a_s = -1;
		}
		if(lever2 == null) {
			lever2 = 0.55;
		}
		if(lever1 == null) {
			lever1 = 0.55;
		}
		var rez = null;
		var tmp;
		var a = [dot3D0,dot3D1,dot3D2];
		var rez1 = null;
		var al = a.length;
		if(al > 1) {
			rez1 = true;
			var size = a[0].length;
			var _g1 = 1;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				if(size != a[i].length) {
					rez1 = false;
				}
			}
		} else {
			rez1 = true;
		}
		if(!(!rez1)) {
			tmp = dot3D0.length != 3;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		var v1 = this.vecXD(dot3D0,dot3D1);
		var v2 = this.vecXD(dot3D0,dot3D2);
		var v12 = this.vecXD(dot3D1,dot3D2);
		var t = this.dotXDoffset(dot3D1,v12,this.vecXDnorm(v12) / 2);
		var v = this.vecXD(dot3D0,t);
		var r1 = null;
		var r2 = null;
		if(a_s < 0) {
			if(lever1 > 0) {
				r1 = this.dotXDoffset(dot3D1,v2,this.vecXDnorm(v2) * lever1);
			} else if(lever1 < 0) {
				r1 = this.dotXDoffset(dot3D1,v1,this.vecXDnorm(v1) * lever1);
			} else {
				r1 = dot3D1;
			}
			if(lever2 > 0) {
				r2 = this.dotXDoffset(dot3D2,v1,this.vecXDnorm(v1) * lever2);
			} else if(lever2 < 0) {
				r2 = this.dotXDoffset(dot3D2,v2,this.vecXDnorm(v2) * lever2);
			} else {
				r2 = dot3D2;
			}
		} else if(a_s > 0) {
			if(lever1 > 0) {
				r1 = this.dotXDoffset(dot3D1,v1,this.vecXDnorm(v2) * lever1);
			} else if(lever1 < 0) {
				r1 = this.dotXDoffset(dot3D1,v2,this.vecXDnorm(v1) * lever1);
			} else {
				r1 = dot3D1;
			}
			if(lever2 > 0) {
				r2 = this.dotXDoffset(dot3D2,v2,this.vecXDnorm(v1) * lever2);
			} else if(lever2 < 0) {
				r2 = this.dotXDoffset(dot3D2,v1,this.vecXDnorm(v2) * lever2);
			} else {
				r2 = dot3D2;
			}
		} else {
			r1 = this.dotXDoffset(dot3D1,v,this.vecXDnorm(v) * lever1);
			r2 = this.dotXDoffset(dot3D2,v,this.vecXDnorm(v) * lever2);
		}
		rez = [dot3D1,r1,r2,dot3D2];
		return rez;
	}
	,line3D_2dots: function(dot3D0,dot3D1) {
		var rez = null;
		if(!this.vecXDsamesize(dot3D0,dot3D1) || dot3D0.length != 3) {
			return rez;
		}
		var v = this.vecXD(dot3D0,dot3D1);
		var lv = this.vecXDnorm(v);
		var lever0 = this.dotXDoffset(dot3D0,v,lv / 3);
		var lever1 = this.dotXDoffset(dot3D0,v,lv * 2 / 3);
		rez = [dot3D0,lever0,lever1,dot3D1];
		return rez;
	}
	,line3D_dot_offset: function(dot3D,vec3D,distance) {
		var rez = null;
		if(distance == 0 || !this.vecXDsamesize(dot3D,vec3D) || dot3D.length != 3 || this.vecXDnorm(vec3D) == 0) {
			return rez;
		}
		rez = this.line3D_2dots(dot3D,this.dotXDoffset(dot3D,vec3D,distance));
		return rez;
	}
	,curve3D_4to12: function(curve) {
		var rez = null;
		var tmp;
		if(curve.length == 4 && curve[0].length == 3) {
			var rez1 = null;
			var al = curve.length;
			if(al > 1) {
				rez1 = true;
				var size = curve[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != curve[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < 4) {
				var i1 = _g11++;
				var _g21 = 0;
				while(_g21 < 3) {
					var ai = _g21++;
					_g2.push(curve[i1][ai]);
				}
			}
			rez = _g2;
		}
		return rez;
	}
	,curve3D_12to4: function(curve) {
		var rez = null;
		if(curve.length == 12) {
			var _g = [];
			var _g1 = 0;
			var _g2 = [0,3,6,9];
			while(_g1 < _g2.length) {
				var i = _g2[_g1];
				++_g1;
				var _g3 = [];
				var _g4 = 0;
				while(_g4 < 3) {
					var ai = _g4++;
					_g3.push(curve[ai + i]);
				}
				_g.push(_g3);
			}
			rez = _g;
		}
		return rez;
	}
	,beziercubic3D_derivativeparameters: function(curve) {
		var rez = null;
		var cl = curve.length;
		var tmp;
		if(cl == 4 && curve[0].length == 3) {
			var rez1 = null;
			var al = curve.length;
			if(al > 1) {
				rez1 = true;
				var size = curve[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != curve[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < 3) {
				var i1 = _g11++;
				var _g21 = [];
				var _g3 = 0;
				while(_g3 < 4) {
					var p = _g3++;
					_g21.push(curve[p][i1]);
				}
				_g2.push(_g21);
			}
			rez = _g2;
		}
		return rez;
	}
	,beziercubic_derivative: function(bcp,p) {
		var rez = null;
		if(bcp.length == 4) {
			rez = 3 * (1 - p) * (1 - p) * (bcp[1] - bcp[0]) + 6 * (1 - p) * p * (bcp[2] - bcp[1]) + 3 * p * p * (bcp[3] - bcp[2]);
		}
		return rez;
	}
	,beziercubic3D_derivative: function(curve,p) {
		var rez = null;
		var tmp;
		if(curve.length == 4 && curve[0].length == 3) {
			var rez1 = null;
			var al = curve.length;
			if(al > 1) {
				rez1 = true;
				var size = curve[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != curve[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			var rez2 = null;
			var cl = curve.length;
			var rez3;
			if(cl == 4 && curve[0].length == 3) {
				var rez4 = null;
				var al1 = curve.length;
				if(al1 > 1) {
					rez4 = true;
					var size1 = curve[0].length;
					var _g12 = 1;
					var _g3 = al1;
					while(_g12 < _g3) {
						var i1 = _g12++;
						if(size1 != curve[i1].length) {
							rez4 = false;
						}
					}
				} else {
					rez4 = true;
				}
				rez3 = rez4;
			} else {
				rez3 = false;
			}
			if(rez3) {
				var _g4 = [];
				var _g13 = 0;
				while(_g13 < 3) {
					var i2 = _g13++;
					var _g21 = [];
					var _g31 = 0;
					while(_g31 < 4) {
						var p1 = _g31++;
						_g21.push(curve[p1][i2]);
					}
					_g4.push(_g21);
				}
				rez2 = _g4;
			}
			var _g22 = rez2;
			while(_g11 < _g22.length) {
				var i3 = _g22[_g11];
				++_g11;
				var rez5 = null;
				if(i3.length == 4) {
					rez5 = 3 * (1 - p) * (1 - p) * (i3[1] - i3[0]) + 6 * (1 - p) * p * (i3[2] - i3[1]) + 3 * p * p * (i3[3] - i3[2]);
				}
				_g2.push(rez5);
			}
			rez = _g2;
		}
		return rez;
	}
	,beziercubic_support_dot_one: function(beziercubic_one_axis_coordinates) {
		var rez = null;
		var c = beziercubic_one_axis_coordinates;
		if(c.length == 4) {
			rez = (-5 * c[0] + 18 * c[1] - 9 * c[2] + 2 * c[3]) / 6;
		}
		return rez;
	}
	,beziercubic3D_support_dot_one: function(curve3D_4dots) {
		var rez = null;
		var c = curve3D_4dots;
		var tmp;
		if(c.length == 4) {
			var rez1 = null;
			var al = c.length;
			if(al > 1) {
				rez1 = true;
				var size = c[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != c[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			var rez2 = null;
			var cl = c.length;
			var rez3;
			if(cl == 4 && c[0].length == 3) {
				var rez4 = null;
				var al1 = c.length;
				if(al1 > 1) {
					rez4 = true;
					var size1 = c[0].length;
					var _g12 = 1;
					var _g3 = al1;
					while(_g12 < _g3) {
						var i1 = _g12++;
						if(size1 != c[i1].length) {
							rez4 = false;
						}
					}
				} else {
					rez4 = true;
				}
				rez3 = rez4;
			} else {
				rez3 = false;
			}
			if(rez3) {
				var _g4 = [];
				var _g13 = 0;
				while(_g13 < 3) {
					var i2 = _g13++;
					var _g21 = [];
					var _g31 = 0;
					while(_g31 < 4) {
						var p = _g31++;
						_g21.push(c[p][i2]);
					}
					_g4.push(_g21);
				}
				rez2 = _g4;
			}
			var _g22 = rez2;
			while(_g11 < _g22.length) {
				var i3 = _g22[_g11];
				++_g11;
				var rez5 = null;
				var c1 = i3;
				if(c1.length == 4) {
					rez5 = (-5 * c1[0] + 18 * c1[1] - 9 * c1[2] + 2 * c1[3]) / 6;
				}
				_g2.push(rez5);
			}
			rez = _g2;
		}
		return rez;
	}
	,beziercubic_support_dot_two: function(beziercubic_one_axis_coordinates) {
		var rez = null;
		var c = beziercubic_one_axis_coordinates;
		if(c.length == 4) {
			rez = (2 * c[0] - 9 * c[1] + 18 * c[2] - 5 * c[3]) / 6;
		}
		return rez;
	}
	,beziercubic3D_support_dot_two: function(curve3D_4dots) {
		var rez = null;
		var c = curve3D_4dots;
		var tmp;
		if(c.length == 4) {
			var rez1 = null;
			var al = c.length;
			if(al > 1) {
				rez1 = true;
				var size = c[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != c[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			var rez2 = null;
			var cl = c.length;
			var rez3;
			if(cl == 4 && c[0].length == 3) {
				var rez4 = null;
				var al1 = c.length;
				if(al1 > 1) {
					rez4 = true;
					var size1 = c[0].length;
					var _g12 = 1;
					var _g3 = al1;
					while(_g12 < _g3) {
						var i1 = _g12++;
						if(size1 != c[i1].length) {
							rez4 = false;
						}
					}
				} else {
					rez4 = true;
				}
				rez3 = rez4;
			} else {
				rez3 = false;
			}
			if(rez3) {
				var _g4 = [];
				var _g13 = 0;
				while(_g13 < 3) {
					var i2 = _g13++;
					var _g21 = [];
					var _g31 = 0;
					while(_g31 < 4) {
						var p = _g31++;
						_g21.push(c[p][i2]);
					}
					_g4.push(_g21);
				}
				rez2 = _g4;
			}
			var _g22 = rez2;
			while(_g11 < _g22.length) {
				var i3 = _g22[_g11];
				++_g11;
				var rez5 = null;
				var c1 = i3;
				if(c1.length == 4) {
					rez5 = (2 * c1[0] - 9 * c1[1] + 18 * c1[2] - 5 * c1[3]) / 6;
				}
				_g2.push(rez5);
			}
			rez = _g2;
		}
		return rez;
	}
	,beziercubic3D_follow_4dots_trajectory: function(dots) {
		var rez = null;
		var tmp;
		if(dots.length == 4 && dots[0].length == 3) {
			var rez1 = null;
			var al = dots.length;
			if(al > 1) {
				rez1 = true;
				var size = dots[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != dots[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var dot_one = this.beziercubic3D_support_dot_one(dots);
			var dot_two = this.beziercubic3D_support_dot_two(dots);
			rez = [dots[0],dot_one,dot_two,dots[3]];
		}
		return rez;
	}
	,beziercubic_coordinate: function(beziercubic_one_axis_coordinates,parameter) {
		var rez = null;
		var c = beziercubic_one_axis_coordinates;
		var p = parameter;
		if(c.length == 4) {
			rez = (1 - p) * (1 - p) * (1 - p) * c[0] + 3 * (1 - p) * (1 - p) * p * c[1] + 3 * (1 - p) * p * p * c[2] + p * p * p * c[3];
		}
		return rez;
	}
	,beziercubic3Ddot: function(beziercubic3D,parameter) {
		var rez = null;
		var c = beziercubic3D;
		var p = parameter;
		var tmp;
		if(c.length == 4 && c[0].length == 3) {
			var rez1 = null;
			var al = c.length;
			if(al > 1) {
				rez1 = true;
				var size = c[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != c[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			var rez2 = null;
			var cl = c.length;
			var rez3;
			if(cl == 4 && c[0].length == 3) {
				var rez4 = null;
				var al1 = c.length;
				if(al1 > 1) {
					rez4 = true;
					var size1 = c[0].length;
					var _g12 = 1;
					var _g3 = al1;
					while(_g12 < _g3) {
						var i1 = _g12++;
						if(size1 != c[i1].length) {
							rez4 = false;
						}
					}
				} else {
					rez4 = true;
				}
				rez3 = rez4;
			} else {
				rez3 = false;
			}
			if(rez3) {
				var _g4 = [];
				var _g13 = 0;
				while(_g13 < 3) {
					var i2 = _g13++;
					var _g21 = [];
					var _g31 = 0;
					while(_g31 < 4) {
						var p1 = _g31++;
						_g21.push(c[p1][i2]);
					}
					_g4.push(_g21);
				}
				rez2 = _g4;
			}
			var _g22 = rez2;
			while(_g11 < _g22.length) {
				var i3 = _g22[_g11];
				++_g11;
				var rez5 = null;
				var c1 = i3;
				var p2 = p;
				if(c1.length == 4) {
					rez5 = (1 - p2) * (1 - p2) * (1 - p2) * c1[0] + 3 * (1 - p2) * (1 - p2) * p2 * c1[1] + 3 * (1 - p2) * p2 * p2 * c1[2] + p2 * p2 * p2 * c1[3];
				}
				_g2.push(rez5);
			}
			rez = _g2;
		}
		return rez;
	}
	,curve3D_4dots_follow_beziercubic_trajectory: function(beziercubic3D) {
		var rez = null;
		var c = beziercubic3D;
		var tmp;
		if(c.length == 4 && c[0].length == 3) {
			var rez1 = null;
			var al = c.length;
			if(al > 1) {
				rez1 = true;
				var size = c[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != c[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp = rez1;
		} else {
			tmp = false;
		}
		if(tmp) {
			c[1] = this.beziercubic3Ddot(c,0.333333333333333315);
			c[2] = this.beziercubic3Ddot(c,0.66666666666666663);
		}
		return c;
	}
	,curve3Doffset: function(curve3D,vec3D,distance) {
		var rez = null;
		var tmp;
		var tmp1;
		if(curve3D.length == 4 && curve3D[0].length == 3) {
			var rez1 = null;
			var al = curve3D.length;
			if(al > 1) {
				rez1 = true;
				var size = curve3D[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != curve3D[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp1 = rez1;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = vec3D.length == 3;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < curve3D.length) {
				var i1 = curve3D[_g11];
				++_g11;
				_g2.push(this.dotXDoffset(i1,vec3D,distance));
			}
			rez = _g2;
		}
		return rez;
	}
	,curve3Drotate: function(curve3D,dot3D,vec3D,angle,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		if(curve3D.length == 4 && curve3D[0].length == 3) {
			var rez1 = null;
			var al = curve3D.length;
			if(al > 1) {
				rez1 = true;
				var size = curve3D[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != curve3D[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp3 = rez1;
		} else {
			tmp3 = false;
		}
		if(tmp3) {
			tmp2 = dot3D.length == 3;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = vec3D.length == 3;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.vecXDnorm(vec3D) > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(angle != 0) {
				var _g2 = [];
				var _g11 = 0;
				while(_g11 < curve3D.length) {
					var i1 = curve3D[_g11];
					++_g11;
					_g2.push(this.dot3Drotate(i1,dot3D,vec3D,angle,rad));
				}
				rez = _g2;
			} else {
				rez = curve3D;
			}
		}
		return rez;
	}
	,curve3Dscale: function(curve3D,scale_xyz,dot3D) {
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		if(curve3D.length == 4 && curve3D[0].length == 3) {
			var rez1 = null;
			var al = curve3D.length;
			if(al > 1) {
				rez1 = true;
				var size = curve3D[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != curve3D[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp2 = rez1;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = dot3D.length == 3;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = scale_xyz.length == 3;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.vecXDnorm(scale_xyz) > 0) {
				var _g2 = [];
				var _g11 = 0;
				while(_g11 < curve3D.length) {
					var i1 = curve3D[_g11];
					++_g11;
					_g2.push(this.dotXDscale(i1,scale_xyz,dot3D));
				}
				rez = _g2;
			} else {
				var _g3 = [];
				var _g12 = 0;
				while(_g12 < 4) {
					var i2 = _g12++;
					_g3.push([0,0,0]);
				}
				rez = _g3;
			}
		}
		return rez;
	}
	,ellipse2Dperimeter_ramanujan: function(semiaxis_a,semiaxis_b) {
		var rez = null;
		var a = semiaxis_a;
		var b = semiaxis_b;
		if(a > 0 && b > 0) {
			var l1 = Math.PI * (3 * (a + b) - Math.sqrt((3 * a + b) * (a + 3 * b)));
			var l2 = Math.PI * (a + b) * (1 + 3 * (a - b) * (a - b) / (a + b) / (a + b) / (10 + Math.sqrt(4 - 3 * (a - b) * (a - b) / (a + b) / (a + b))));
			rez = Math.max(l1,l2);
		}
		return rez;
	}
	,tangent_centered_ellipse2Ddot: function(semiaxis_a,semiaxis_b,ellipse_dot2D) {
		var v = null;
		var a = semiaxis_a;
		var b = semiaxis_b;
		if(a > 0 && b > 0 && ellipse_dot2D.length == 2) {
			var x0 = ellipse_dot2D[0];
			var y0 = ellipse_dot2D[1];
			var x;
			var y;
			if(x0 != 0) {
				x = 0.9 * x0;
				if(x0 > 0) {
					if(y0 == 0) {
						v = [[x0,y0],[x0,1]];
					} else {
						y = (1 - x * x0 / (a * a)) * b * b / y0;
						if(y0 > 0) {
							v = [[x0,y0],[x,y]];
						} else {
							v = [[x,y],[x0,y0]];
						}
					}
				} else if(x0 < 0) {
					if(y0 == 0) {
						v = [[x0,y0],[x0,-1]];
					} else {
						y = (1 - x * x0 / (a * a)) * b * b / y0;
						if(y0 > 0) {
							v = [[x,y],[x0,y0]];
						} else {
							v = [[x0,y0],[x,y]];
						}
					}
				}
			} else {
				y = 0.9 * y0;
				if(y0 > 0) {
					if(x0 == 0) {
						v = [[x0,y0],[-1,y0]];
					} else {
						x = (1 - y * y0 / (b * b)) * a * a / x0;
						if(x0 > 0) {
							v = [[x,y],[x0,y0]];
						} else {
							v = [[x0,y0],[x,y]];
						}
					}
				} else if(y0 < 0) {
					if(x0 == 0) {
						v = [[x0,y0],[1,y0]];
					} else {
						x = (1 - y * y0 / (b * b)) * a * a / x0;
						if(x0 < 0) {
							v = [[x,y],[x0,y0]];
						} else {
							v = [[x0,y0],[x,y]];
						}
					}
				}
			}
		}
		return v;
	}
	,ellipse_e_parameter: function(semiaxis_a,semiaxis_b) {
		var rez = null;
		var a = semiaxis_a;
		var b = semiaxis_b;
		if(a >= 0 && b >= 0 && a + b > 0) {
			if(a >= b) {
				rez = Math.sqrt(1 - b * b / (a * a));
			} else {
				rez = -Math.sqrt(1 - a * a / (b * b));
			}
		}
		return rez;
	}
	,ellipse_c_parameter: function(semiaxis_a,semiaxis_b) {
		var rez = null;
		var a = semiaxis_a;
		var b = semiaxis_b;
		var rez1 = null;
		var a1 = a;
		var b1 = b;
		if(a1 >= 0 && b1 >= 0 && a1 + b1 > 0) {
			if(a1 >= b1) {
				rez1 = Math.sqrt(1 - b1 * b1 / (a1 * a1));
			} else {
				rez1 = -Math.sqrt(1 - a1 * a1 / (b1 * b1));
			}
		}
		var e = rez1;
		if(e == null) {
			return rez;
		}
		if(a >= b) {
			rez = a * e;
		} else {
			rez = b * e;
		}
		return rez;
	}
	,tangent_vec3D_in_plane_of_ellipse2D_placed_in_3Dspace: function(dot3D,vec3Dnormal_ellipse_plane,vec3Dsemiaxis_a_direction,semiaxis_a,semiaxis_b,semiaxis_a_negative,semiaxis_b_negative,angle,rad) {
		var rez = null;
		var t = dot3D;
		var vn = vec3Dnormal_ellipse_plane;
		var va = vec3Dsemiaxis_a_direction;
		var a = semiaxis_a;
		var b = semiaxis_b;
		var an = semiaxis_a_negative;
		var bn = semiaxis_b_negative;
		if(t.length == 3 && vn.length == 3 && va.length == 3 && this.vecXDnorm(vn) > 0 && this.vecXDnorm(va) > 0 && !this.vecXDparalleled(vn,va) && a > 0 && b > 0 && an > 0 && bn > 0) {
			var ea = null;
			var eb = null;
			var _g = this.angle_quadrant(angle,rad);
			switch(_g) {
			case 1:
				ea = a;
				eb = b;
				break;
			case 2:
				ea = an;
				eb = b;
				break;
			case 3:
				ea = an;
				eb = bn;
				break;
			case 4:
				ea = a;
				eb = bn;
				break;
			}
			var ep = this.plane3D_dot3Dnormal(t,vn);
			var va1 = this.projection_vec3D_on_plane3D(va,ep);
			var vb = this.vec3Dnormal(vn,va1);
			var u = angle;
			var a1 = ea;
			var b1 = eb;
			if(!rad) {
				a1 = a1 / 180 * Math.PI;
			}
			var edot = [a1 * Math.cos(u),b1 * Math.sin(u)];
			var dxy0dxy1 = this.tangent_centered_ellipse2Ddot(ea,eb,edot);
			var te = this.dotXDoffset(t,va1,dxy0dxy1[0][0]);
			var te1 = this.dotXDoffset(te,vb,dxy0dxy1[0][1]);
			var tt = this.dotXDoffset(t,va1,dxy0dxy1[1][0]);
			var tt1 = this.dotXDoffset(tt,vb,dxy0dxy1[1][1]);
			rez = this.vecXD(te1,tt1);
		}
		return rez;
	}
	,ellipse3D_dots: function(dot3D,vec3Dsemiaxes,semiaxes) {
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		if(!(dot3D.length != 3 || vec3Dsemiaxes.length != 4)) {
			var rez1 = null;
			var al = vec3Dsemiaxes.length;
			if(al > 1) {
				rez1 = true;
				var size = vec3Dsemiaxes[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != vec3Dsemiaxes[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp3 = !rez1;
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			tmp2 = semiaxes.length != 4;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			var rez2 = false;
			var _g2 = 0;
			while(_g2 < semiaxes.length) {
				var i1 = semiaxes[_g2];
				++_g2;
				if(i1 == 0) {
					rez2 = true;
				}
			}
			tmp1 = rez2;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var rez3 = null;
			var lv = vec3Dsemiaxes.length;
			if(lv > 0) {
				rez3 = false;
				var _g11 = 0;
				var _g3 = lv;
				while(_g11 < _g3) {
					var i2 = _g11++;
					if(this.vecXDnorm(vec3Dsemiaxes[i2]) == 0) {
						rez3 = true;
						break;
					}
				}
			}
			tmp = rez3;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		var t0 = dot3D;
		var va = vec3Dsemiaxes[0];
		var vb = vec3Dsemiaxes[1];
		var vad = vec3Dsemiaxes[2];
		var vbd = vec3Dsemiaxes[3];
		var a = semiaxes[0];
		var b = semiaxes[1];
		var ad = semiaxes[2];
		var bd = semiaxes[3];
		var cos45 = Math.cos(0.25 * Math.PI);
		var v = [va,vb,vad,vbd];
		var d = [a * cos45,b * cos45,ad * cos45,bd * cos45];
		var vv = [vb,vad,vbd,va];
		var dd = [b * cos45,ad * cos45,bd * cos45,a * cos45];
		rez = [t0];
		var _g4 = 0;
		while(_g4 < 4) {
			var i3 = _g4++;
			rez.push(this.dotXDoffset(t0,vec3Dsemiaxes[i3],semiaxes[i3]));
			rez.push(this.dotXDoffset(this.dotXDoffset(t0,v[i3],d[i3]),vv[i3],dd[i3]));
		}
		return rez;
	}
	,ellipse2Ddot: function(angle,semiaxis_a_ox,semiaxis_b_oy,rad) {
		if(rad == null) {
			rad = false;
		}
		var u = angle;
		var a = semiaxis_a_ox;
		var b = semiaxis_b_oy;
		if(!rad) {
			a = a / 180 * Math.PI;
		}
		return [a * Math.cos(u),b * Math.sin(u)];
	}
	,curve2D_4dots_elliptic_shape_restricted_to_quarter: function(angle0,angle1,semiaxis_a_ox,semiaxis_b_oy,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var a0 = rad ? angle0 * 180 / Math.PI : angle0;
		var a1 = rad ? angle1 * 180 / Math.PI : angle1;
		if(a0 > 90) {
			a0 = 90;
		} else if(a0 < 0) {
			a0 = 0;
		} else {
			a0 = a0;
		}
		if(a1 > 90) {
			a1 = 90;
		} else if(a1 < 0) {
			a1 = 0;
		} else {
			a1 = a1;
		}
		if(a0 >= a1) {
			a0 = 0;
		} else {
			a0 = a0;
		}
		var du = a1 - a0;
		var ae = semiaxis_a_ox;
		var be = semiaxis_b_oy;
		var _g = [];
		var _g1 = 0;
		var _g2 = [a0,a0 + du / 3,a0 + du * 2 / 3,a0 + du];
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			var u = a;
			var a2 = ae;
			var b = be;
			if(!rad) {
				a2 = a2 / 180 * Math.PI;
			}
			_g.push([a2 * Math.cos(u),b * Math.sin(u)]);
		}
		rez = _g;
		return rez;
	}
	,beziercubic3D_elliptic_shape_restricted_to_quarter: function(dot3Dc,vec3D_a_ox,vec3D_b_ox,semiaxis_a_ox,semiaxis_b_oy,angle0,angle1,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var tc = dot3Dc;
		var va = vec3D_a_ox;
		var vb = vec3D_b_ox;
		var a = semiaxis_a_ox;
		var b = semiaxis_b_oy;
		if(tc.length == 3 && va.length == 3 && vb.length == 3 && this.vecXDnorm(va) > 0 && this.vecXDnorm(vb) > 0) {
			var dxdy = this.curve2D_4dots_elliptic_shape_restricted_to_quarter(angle0,angle1,a,b,rad);
			var _g = [];
			var _g1 = 0;
			while(_g1 < dxdy.length) {
				var i = dxdy[_g1];
				++_g1;
				_g.push(this.dotXDoffset(this.dotXDoffset(tc,va,i[0]),vb,i[1]));
			}
			rez = _g;
			var rez1 = null;
			var rez2;
			if(rez.length == 4 && rez[0].length == 3) {
				var rez3 = null;
				var al = rez.length;
				if(al > 1) {
					rez3 = true;
					var size = rez[0].length;
					var _g11 = 1;
					var _g2 = al;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(size != rez[i1].length) {
							rez3 = false;
						}
					}
				} else {
					rez3 = true;
				}
				rez2 = rez3;
			} else {
				rez2 = false;
			}
			if(rez2) {
				var dot_one = this.beziercubic3D_support_dot_one(rez);
				var dot_two = this.beziercubic3D_support_dot_two(rez);
				rez1 = [rez[0],dot_one,dot_two,rez[3]];
			}
			rez = rez1;
		}
		return rez;
	}
	,angle_required_to_place_curve_on_ellipse: function(curve_length,semiaxis_a_ox,semiaxis_b_oy,angle0,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var cl = curve_length;
		var a = semiaxis_a_ox;
		var b = semiaxis_b_oy;
		var u = angle0;
		var le = 0;
		var xy = null;
		if(cl > 0 && a > 0 && b > 0) {
			var u1 = u;
			var a1 = a;
			var b1 = b;
			if(!rad) {
				a1 = a1 / 180 * Math.PI;
			}
			var xy0 = [a1 * Math.cos(u1),b1 * Math.sin(u1)];
			if(rad) {
				u = u * 180 / Math.PI;
			}
			var _g = 1;
			while(_g < 361) {
				var ue = _g++;
				var u2 = u + ue;
				var a2 = a;
				var b2 = b;
				a2 = a2 / 180 * Math.PI;
				xy = [a2 * Math.cos(u2),b2 * Math.sin(u2)];
				le += this.vecXDnorm(this.vecXD(xy0,xy));
				if(le >= cl) {
					if(rad) {
						return ue / 180 * Math.PI;
					} else {
						return ue;
					}
				}
				xy0 = xy;
			}
			if(rad) {
				rez = 2. * Math.PI;
			} else {
				rez = 360;
			}
		}
		return rez;
	}
	,polygon3D_inside_ellipse: function(dot3D,vec3Dsemiaxes,semiaxes,angle_proportions) {
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		var tmp3;
		var tmp4;
		if(!(dot3D.length != 3 || vec3Dsemiaxes.length != 4)) {
			var rez1 = null;
			var al = vec3Dsemiaxes.length;
			if(al > 1) {
				rez1 = true;
				var size = vec3Dsemiaxes[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != vec3Dsemiaxes[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp4 = !rez1;
		} else {
			tmp4 = true;
		}
		if(!tmp4) {
			tmp3 = semiaxes.length != 4;
		} else {
			tmp3 = true;
		}
		if(!tmp3) {
			tmp2 = angle_proportions.length < 1;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			var rez2 = false;
			var _g2 = 0;
			while(_g2 < angle_proportions.length) {
				var i1 = angle_proportions[_g2];
				++_g2;
				if(i1 < 0) {
					rez2 = true;
				}
			}
			tmp1 = rez2;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var rez3 = null;
			var al1 = angle_proportions.length;
			if(al1 > 0) {
				rez3 = 0;
				var _g11 = 0;
				var _g3 = al1;
				while(_g11 < _g3) {
					var i2 = _g11++;
					rez3 += angle_proportions[i2];
				}
			}
			tmp = rez3 == 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		var t0 = dot3D;
		var va = vec3Dsemiaxes[0];
		var vb = vec3Dsemiaxes[1];
		var vad = vec3Dsemiaxes[2];
		var vbd = vec3Dsemiaxes[3];
		var a = semiaxes[0];
		var b = semiaxes[1];
		var ad = semiaxes[2];
		var bd = semiaxes[3];
		var doli = angle_proportions;
		var u = 0;
		var rez4 = null;
		var al2 = doli.length;
		if(al2 > 0) {
			rez4 = 0;
			var _g12 = 0;
			var _g4 = al2;
			while(_g12 < _g4) {
				var i3 = _g12++;
				rez4 += doli[i3];
			}
		}
		var x = 360 / rez4;
		var axis_a;
		var axis_b;
		var dlina_a;
		var dlina_b;
		var v;
		var d;
		var vv;
		var dd;
		rez = [t0];
		var _g5 = 0;
		while(_g5 < doli.length) {
			var i4 = doli[_g5];
			++_g5;
			axis_a = va;
			dlina_a = a;
			axis_b = vb;
			dlina_b = b;
			u += i4 * x;
			if(u > 90 && u <= 270) {
				axis_a = vad;
				dlina_a = ad;
			}
			if(u > 180) {
				axis_b = vbd;
				dlina_b = bd;
			}
			v = axis_a;
			d = dlina_a * Math.abs(Math.cos(u / 180 * Math.PI));
			vv = axis_b;
			dd = dlina_b * Math.abs(Math.sin(u / 180 * Math.PI));
			rez.push(this.dotXDoffset(this.dotXDoffset(t0,v,d),vv,dd));
		}
		return rez;
	}
	,polygon3D_vec3Dfield_distance: function(dot3D,vec3Dfield,distances) {
		var rez = null;
		var tmp;
		var tmp1;
		var tmp2;
		if(dot3D.length == 3) {
			var rez1 = null;
			var al = vec3Dfield.length;
			if(al > 1) {
				rez1 = true;
				var size = vec3Dfield[0].length;
				var _g1 = 1;
				var _g = al;
				while(_g1 < _g) {
					var i = _g1++;
					if(size != vec3Dfield[i].length) {
						rez1 = false;
					}
				}
			} else {
				rez1 = true;
			}
			tmp2 = !rez1;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			tmp1 = vec3Dfield.length != distances.length;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			tmp = vec3Dfield[0].length != 3;
		} else {
			tmp = true;
		}
		if(tmp) {
			return rez;
		}
		rez = [dot3D];
		var _g11 = 0;
		var _g2 = vec3Dfield.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			rez.push(this.dotXDoffset(dot3D,vec3Dfield[i1],distances[i1]));
		}
		return rez;
	}
	,polygon3D_in_plane: function(dot3D,vec3Dplane_normal,vec3Dsemiaxis_a_direction,angle_proportions,distances) {
		var rez = null;
		var t = dot3D;
		var vn = vec3Dplane_normal;
		var va = vec3Dsemiaxis_a_direction;
		var ap = angle_proportions;
		var d = distances;
		if(t.length != 3 || vn.length != 3 || va.length != 3 || ap.length != d.length || this.vecXDparalleled(va,vn)) {
			return rez;
		}
		var rez1 = null;
		var al = ap.length;
		if(al > 0) {
			rez1 = 0;
			var _g1 = 0;
			var _g = al;
			while(_g1 < _g) {
				var i = _g1++;
				rez1 += ap[i];
			}
		}
		var x = 360 / rez1;
		va = this.projection_vec3D_on_plane3D(va,[vn[0],vn[1],vn[2],0]);
		rez = [t];
		var _g11 = 0;
		var _g2 = d.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			rez.push(this.dotXDoffset(t,this.vec3Drotate(va,vn,x * ap[i1]),distances[i1]));
		}
		return rez;
	}
	,polygon3D_to_vec3Dfield: function(polygon3D) {
		var _g = [];
		var _g2 = 1;
		var _g1 = polygon3D.length;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(this.vecXD(polygon3D[0],polygon3D[i]));
		}
		return _g;
	}
	,projection_vec3D_on_plane3D: function(vec3D,plane3D) {
		var rez = null;
		if(vec3D.length != 3 || plane3D.length != 4) {
			return rez;
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < 3) {
			var i = _g1++;
			_g.push(plane3D[i]);
		}
		var vp = _g;
		if(this.vecXDparalleled(vec3D,vp) || this.vecXDnorm(vec3D) == 0 || this.vecXDnorm(vp) == 0) {
			return rez;
		}
		rez = vec3D;
		var t0 = [0,0,0];
		var t1 = this.dotXDoffset(t0,vec3D,1);
		t1 = this.projection_dot3D_on_plane3D(t1,plane3D);
		rez = this.vecXD(t0,t1);
		return rez;
	}
	,angle_vec3Dvec3D_projection_on_plane3D: function(vec3D1,vec3D2,plane3D,rad) {
		if(rad == null) {
			rad = false;
		}
		var rez = null;
		var v1 = vec3D1;
		var v2 = vec3D2;
		var v1l = v1.length;
		var v2l = v2.length;
		var v1mod = this.vecXDnorm(v1);
		var v2mod = this.vecXDnorm(v2);
		if(v1l != 3 || v2l != 3 || v1mod == 0 || v2mod == 0) {
			return rez;
		}
		var p = plane3D;
		if(p.length < 3) {
			return rez;
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < 3) {
			var i = _g1++;
			_g.push(p[i]);
		}
		var vn = _g;
		if(this.vecXDnorm(vn) == 0) {
			return rez;
		}
		rez = 0;
		if(this.vecXDparalleled_sameside(v1,v2)) {
			return rez;
		}
		var pv1 = this.projection_vec3D_on_plane3D(v1,vn);
		var pv2 = this.projection_vec3D_on_plane3D(v2,vn);
		var pvn = this.vecXDparalleled(pv1,pv2) ? vn : this.vec3Dnormal(pv1,pv2);
		var uvnpvn = this.vecXDangle(vn,pvn,rad);
		var uvv = this.vecXDangle(v1,v2,rad);
		var uznak = rad ? 0.5 * Math.PI : 90;
		if(uvnpvn > uznak) {
			rez = -uvv;
		} else {
			rez = uvv;
		}
		return rez;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
GeometryXD.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
