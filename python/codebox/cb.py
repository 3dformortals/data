# Generated by Haxe 4.1.5
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import re as python_lib_Re


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'



class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]

    def __init__(self,r,opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)



class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]

    def __init__(self):
        self.h = dict()



class codebox_Codebox:
    _hx_class_name = "codebox.Codebox"
    __slots__ = ()
    _hx_statics = ["main", "getMatches", "mirror_n", "mirror", "upanddown", "opposite", "mix"]

    @staticmethod
    def main():
        print("codebox is ready for use")

    @staticmethod
    def getMatches(ereg,input,index = None):
        if (index is None):
            index = 0
        matches = []
        while True:
            ereg.matchObj = python_lib_Re.search(ereg.pattern,input)
            if (not ((ereg.matchObj is not None))):
                break
            x = ereg.matchObj.group(index)
            matches.append(x)
            input = HxString.substr(ereg.matchObj.string,ereg.matchObj.end(),None)
        return matches

    @staticmethod
    def mirror_n(t,n):
        regstr = ((".{1," + str(n)) + "}")
        r = EReg(regstr,"")
        input = t
        matches = []
        while True:
            r.matchObj = python_lib_Re.search(r.pattern,input)
            if (not ((r.matchObj is not None))):
                break
            x = r.matchObj.group(0)
            matches.append(x)
            input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
        xlist = matches
        _g = 0
        _g1 = len(xlist)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            _this = (xlist[i] if i >= 0 and i < len(xlist) else None)
            ylist = list(_this)
            ylist.reverse()
            python_internal_ArrayImpl._set(xlist, i, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
        return "".join([python_Boot.toString1(x1,'') for x1 in xlist])

    @staticmethod
    def mirror(t):
        x = t
        _g = 2
        _g1 = (len(t) + 1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            regstr = ((".{1," + str(i)) + "}")
            r = EReg(regstr,"")
            input = x
            matches = []
            while True:
                r.matchObj = python_lib_Re.search(r.pattern,input)
                if (not ((r.matchObj is not None))):
                    break
                x1 = r.matchObj.group(0)
                matches.append(x1)
                input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
            xlist = matches
            _g2 = 0
            _g3 = len(xlist)
            while (_g2 < _g3):
                i1 = _g2
                _g2 = (_g2 + 1)
                _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                ylist = list(_this)
                ylist.reverse()
                python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
            x = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
        return x

    @staticmethod
    def upanddown(t):
        toup = False
        todn = False
        x = list(t)
        _g = 0
        _g1 = len(t)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if ((not toup) and (((x[i] if i >= 0 and i < len(x) else None) != (x[i] if i >= 0 and i < len(x) else None).upper()))):
                toup = True
                python_internal_ArrayImpl._set(x, i, (x[i] if i >= 0 and i < len(x) else None).upper())
            elif ((not todn) and (((x[i] if i >= 0 and i < len(x) else None) != (x[i] if i >= 0 and i < len(x) else None).lower()))):
                todn = True
                python_internal_ArrayImpl._set(x, i, (x[i] if i >= 0 and i < len(x) else None).lower())
        return "".join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def opposite(t):
        num = "0123456789"
        numback = "9876543210"
        big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
        small = "abcdefghijklmnopqrstuvwxyz"
        smallback = "zyxwvutsrqponmlkjihgfedcba"
        _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
        face = list(_this)
        _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
        back = list(_this)
        sumdict = haxe_ds_StringMap()
        _g = 0
        _g1 = len(face)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
        rez = ""
        ts = list(t)
        _g = 0
        _g1 = len(ts)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
            else:
                rez = (("null" if rez is None else rez) + "_")
        return rez

    @staticmethod
    def mix(t,mode = None):
        if (mode is None):
            mode = "abc"
        x = t
        mode1 = mode
        if (mode1 == "acb"):
            num = "0123456789"
            numback = "9876543210"
            big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
            small = "abcdefghijklmnopqrstuvwxyz"
            smallback = "zyxwvutsrqponmlkjihgfedcba"
            _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
            face = list(_this)
            _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
            back = list(_this)
            sumdict = haxe_ds_StringMap()
            _g = 0
            _g1 = len(face)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
            rez = ""
            ts = list(x)
            _g = 0
            _g1 = len(ts)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                    rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
                else:
                    rez = (("null" if rez is None else rez) + "_")
            x = rez
            toup = False
            todn = False
            x1 = list(x)
            _g = 0
            _g1 = len(x)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((not toup) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).upper()))):
                    toup = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).upper())
                elif ((not todn) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).lower()))):
                    todn = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).lower())
            x = "".join([python_Boot.toString1(x1,'') for x1 in x1])
            x1 = x
            _g = 2
            _g1 = (len(x) + 1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                regstr = ((".{1," + str(i)) + "}")
                r = EReg(regstr,"")
                input = x1
                matches = []
                while True:
                    r.matchObj = python_lib_Re.search(r.pattern,input)
                    if (not ((r.matchObj is not None))):
                        break
                    x2 = r.matchObj.group(0)
                    matches.append(x2)
                    input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
                xlist = matches
                _g2 = 0
                _g3 = len(xlist)
                while (_g2 < _g3):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                    ylist = list(_this)
                    ylist.reverse()
                    python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
                x1 = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
            x = x1
        elif (mode1 == "bac"):
            x1 = x
            _g = 2
            _g1 = (len(x) + 1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                regstr = ((".{1," + str(i)) + "}")
                r = EReg(regstr,"")
                input = x1
                matches = []
                while True:
                    r.matchObj = python_lib_Re.search(r.pattern,input)
                    if (not ((r.matchObj is not None))):
                        break
                    x2 = r.matchObj.group(0)
                    matches.append(x2)
                    input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
                xlist = matches
                _g2 = 0
                _g3 = len(xlist)
                while (_g2 < _g3):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                    ylist = list(_this)
                    ylist.reverse()
                    python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
                x1 = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
            x = x1
            num = "0123456789"
            numback = "9876543210"
            big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
            small = "abcdefghijklmnopqrstuvwxyz"
            smallback = "zyxwvutsrqponmlkjihgfedcba"
            _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
            face = list(_this)
            _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
            back = list(_this)
            sumdict = haxe_ds_StringMap()
            _g = 0
            _g1 = len(face)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
            rez = ""
            ts = list(x)
            _g = 0
            _g1 = len(ts)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                    rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
                else:
                    rez = (("null" if rez is None else rez) + "_")
            x = rez
            toup = False
            todn = False
            x1 = list(x)
            _g = 0
            _g1 = len(x)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((not toup) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).upper()))):
                    toup = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).upper())
                elif ((not todn) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).lower()))):
                    todn = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).lower())
            x = "".join([python_Boot.toString1(x1,'') for x1 in x1])
        elif (mode1 == "bca"):
            x1 = x
            _g = 2
            _g1 = (len(x) + 1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                regstr = ((".{1," + str(i)) + "}")
                r = EReg(regstr,"")
                input = x1
                matches = []
                while True:
                    r.matchObj = python_lib_Re.search(r.pattern,input)
                    if (not ((r.matchObj is not None))):
                        break
                    x2 = r.matchObj.group(0)
                    matches.append(x2)
                    input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
                xlist = matches
                _g2 = 0
                _g3 = len(xlist)
                while (_g2 < _g3):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                    ylist = list(_this)
                    ylist.reverse()
                    python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
                x1 = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
            x = x1
            toup = False
            todn = False
            x1 = list(x)
            _g = 0
            _g1 = len(x)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((not toup) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).upper()))):
                    toup = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).upper())
                elif ((not todn) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).lower()))):
                    todn = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).lower())
            x = "".join([python_Boot.toString1(x1,'') for x1 in x1])
            num = "0123456789"
            numback = "9876543210"
            big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
            small = "abcdefghijklmnopqrstuvwxyz"
            smallback = "zyxwvutsrqponmlkjihgfedcba"
            _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
            face = list(_this)
            _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
            back = list(_this)
            sumdict = haxe_ds_StringMap()
            _g = 0
            _g1 = len(face)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
            rez = ""
            ts = list(x)
            _g = 0
            _g1 = len(ts)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                    rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
                else:
                    rez = (("null" if rez is None else rez) + "_")
            x = rez
        elif (mode1 == "cab"):
            toup = False
            todn = False
            x1 = list(x)
            _g = 0
            _g1 = len(x)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((not toup) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).upper()))):
                    toup = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).upper())
                elif ((not todn) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).lower()))):
                    todn = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).lower())
            x = "".join([python_Boot.toString1(x1,'') for x1 in x1])
            num = "0123456789"
            numback = "9876543210"
            big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
            small = "abcdefghijklmnopqrstuvwxyz"
            smallback = "zyxwvutsrqponmlkjihgfedcba"
            _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
            face = list(_this)
            _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
            back = list(_this)
            sumdict = haxe_ds_StringMap()
            _g = 0
            _g1 = len(face)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
            rez = ""
            ts = list(x)
            _g = 0
            _g1 = len(ts)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                    rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
                else:
                    rez = (("null" if rez is None else rez) + "_")
            x = rez
            x1 = x
            _g = 2
            _g1 = (len(x) + 1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                regstr = ((".{1," + str(i)) + "}")
                r = EReg(regstr,"")
                input = x1
                matches = []
                while True:
                    r.matchObj = python_lib_Re.search(r.pattern,input)
                    if (not ((r.matchObj is not None))):
                        break
                    x2 = r.matchObj.group(0)
                    matches.append(x2)
                    input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
                xlist = matches
                _g2 = 0
                _g3 = len(xlist)
                while (_g2 < _g3):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                    ylist = list(_this)
                    ylist.reverse()
                    python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
                x1 = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
            x = x1
        elif (mode1 == "cba"):
            toup = False
            todn = False
            x1 = list(x)
            _g = 0
            _g1 = len(x)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((not toup) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).upper()))):
                    toup = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).upper())
                elif ((not todn) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).lower()))):
                    todn = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).lower())
            x = "".join([python_Boot.toString1(x1,'') for x1 in x1])
            x1 = x
            _g = 2
            _g1 = (len(x) + 1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                regstr = ((".{1," + str(i)) + "}")
                r = EReg(regstr,"")
                input = x1
                matches = []
                while True:
                    r.matchObj = python_lib_Re.search(r.pattern,input)
                    if (not ((r.matchObj is not None))):
                        break
                    x2 = r.matchObj.group(0)
                    matches.append(x2)
                    input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
                xlist = matches
                _g2 = 0
                _g3 = len(xlist)
                while (_g2 < _g3):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                    ylist = list(_this)
                    ylist.reverse()
                    python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
                x1 = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
            x = x1
            num = "0123456789"
            numback = "9876543210"
            big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
            small = "abcdefghijklmnopqrstuvwxyz"
            smallback = "zyxwvutsrqponmlkjihgfedcba"
            _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
            face = list(_this)
            _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
            back = list(_this)
            sumdict = haxe_ds_StringMap()
            _g = 0
            _g1 = len(face)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
            rez = ""
            ts = list(x)
            _g = 0
            _g1 = len(ts)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                    rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
                else:
                    rez = (("null" if rez is None else rez) + "_")
            x = rez
        else:
            num = "0123456789"
            numback = "9876543210"
            big = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            bigback = "ZYXWVUTSRQPONMLKJIHGFEDCBA"
            small = "abcdefghijklmnopqrstuvwxyz"
            smallback = "zyxwvutsrqponmlkjihgfedcba"
            _this = ((("null" if num is None else num) + ("null" if small is None else small)) + ("null" if big is None else big))
            face = list(_this)
            _this = ((("null" if numback is None else numback) + ("null" if smallback is None else smallback)) + ("null" if bigback is None else bigback))
            back = list(_this)
            sumdict = haxe_ds_StringMap()
            _g = 0
            _g1 = len(face)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                sumdict.h[(face[i] if i >= 0 and i < len(face) else None)] = (back[i] if i >= 0 and i < len(back) else None)
            rez = ""
            ts = list(x)
            _g = 0
            _g1 = len(ts)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((ts[i] if i >= 0 and i < len(ts) else None) in sumdict.h):
                    rez = (("null" if rez is None else rez) + HxOverrides.stringOrNull(sumdict.h.get((ts[i] if i >= 0 and i < len(ts) else None),None)))
                else:
                    rez = (("null" if rez is None else rez) + "_")
            x = rez
            x1 = x
            _g = 2
            _g1 = (len(x) + 1)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                regstr = ((".{1," + str(i)) + "}")
                r = EReg(regstr,"")
                input = x1
                matches = []
                while True:
                    r.matchObj = python_lib_Re.search(r.pattern,input)
                    if (not ((r.matchObj is not None))):
                        break
                    x2 = r.matchObj.group(0)
                    matches.append(x2)
                    input = HxString.substr(r.matchObj.string,r.matchObj.end(),None)
                xlist = matches
                _g2 = 0
                _g3 = len(xlist)
                while (_g2 < _g3):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    _this = (xlist[i1] if i1 >= 0 and i1 < len(xlist) else None)
                    ylist = list(_this)
                    ylist.reverse()
                    python_internal_ArrayImpl._set(xlist, i1, "".join([python_Boot.toString1(x1,'') for x1 in ylist]))
                x1 = "".join([python_Boot.toString1(x1,'') for x1 in xlist])
            x = x1
            toup = False
            todn = False
            x1 = list(x)
            _g = 0
            _g1 = len(x)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if ((not toup) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).upper()))):
                    toup = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).upper())
                elif ((not todn) and (((x1[i] if i >= 0 and i < len(x1) else None) != (x1[i] if i >= 0 and i < len(x1) else None).lower()))):
                    todn = True
                    python_internal_ArrayImpl._set(x1, i, (x1[i] if i >= 0 and i < len(x1) else None).lower())
            x = "".join([python_Boot.toString1(x1,'') for x1 in x1])
        return x


class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            pass
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class _hx_AnonObject:
    _hx_class_name = "_hx_AnonObject"
    __slots__ = ()


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["_get", "_set"]

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["substr"]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

codebox_Codebox.main()
